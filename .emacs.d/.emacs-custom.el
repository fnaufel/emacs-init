(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-PDF-mode t)
 '(TeX-complete-expert-commands t)
 '(TeX-debug-bad-boxes nil)
 '(TeX-debug-warnings t)
 '(TeX-save-query nil)
 '(TeX-show-compilation nil)
 '(after-save-hook nil)
 '(ansi-color-faces-vector
   [default bold default italic underline success warning error])
 '(bar-cursor-mode nil)
 '(biblio-crossref-user-email-address "jln.neuer@gmail.com")
 '(bibtex-parse-keys-fast nil)
 '(browse-kill-ring-quit-action 'kill-and-delete-window)
 '(browse-url-browser-function 'browse-url-generic)
 '(browse-url-chrome-program "vivaldi")
 '(browse-url-chromium-program "vivaldi")
 '(browse-url-generic-program "/usr/bin/vivaldi-stable")
 '(cal-html-directory "/home/fnaufel/Documents/OrgFiles/Calendars")
 '(cal-html-holidays nil)
 '(calendar-holidays
   '((holiday-fixed 1 1 "New Year's Day")
     (holiday-easter-etc)
     (holiday-fixed 12 25 "Christmas")))
 '(column-number-mode t)
 '(comint-input-ignoredups t)
 '(comint-input-ring-file-name "/home/fnaufel/.bash_history")
 '(comint-input-ring-size 5000)
 '(comint-terminfo-terminal "eterm-color")
 '(company-backends
   '(company-capf company-bbdb company-semantic company-cmake company-clang company-files
                  (company-dabbrev-code company-gtags company-etags company-keywords)
                  company-oddmuse company-dabbrev))
 '(company-selection-wrap-around t)
 '(company-tooltip-limit 30)
 '(csv-separators '("," ";"))
 '(cua-mode nil nil (cua-base))
 '(cua-remap-control-v nil)
 '(cursor-type 'box)
 '(delete-by-moving-to-trash t)
 '(delete-selection-mode t)
 '(describe-char-unidata-list
   '(name old-name general-category decomposition iso-10646-comment))
 '(dired-listing-switches
   "--time-style=+[%Y-%m-%d-%H:%M] --group-directories-first -alDhG")
 '(ebib-keywords
   '("LLM" "teaching" "data science" "neural networks" "interval math" "visual languages" "ontologies" "usability" "description logics" "survey" "markov models" "psychology" "hidden markov models" "statistics" "evolution" "biology" "textbook" "sums" "elliptic curves" "mathematical models" "evolutionary biology" "math" "linguistics" "historical linguistics" "dreams" "combinatorics" "nlp" "talkativeness" "sex" "curves" "conics" "analytic geometry" "chaos" "matrices" "linear algebra" "Science / Life Sciences / Evolution" "Science / Life Sciences / Biophysics" "Science / Life Sciences / Biochemistry" "Mathematics / Applied" "R" "coincidences" "pascal" "letters" "history" "fermat" "arithmetic" "_tablet" "software engineering" "stochastic processes" "queues" "monte carlo" "markov chains" "gibbs fields" "probability" "inference" "confidence interval" "binomial"))
 '(eldoc-idle-delay 0)
 '(eldoc-minor-mode-string nil)
 '(enable-recursive-minibuffers nil)
 '(ess-default-style 'RStudio)
 '(ess-history-directory ".")
 '(ess-style 'RStudio)
 '(fill-column 70)
 '(find-directory-functions '(sunrise-dired cvs-dired-noselect dired-noselect))
 '(flycheck-global-modes nil)
 '(flymake-fringe-indicator-position 'left-fringe)
 '(flymake-gui-warnings-enabled nil)
 '(fringe-mode nil nil (fringe))
 '(global-hl-line-mode t)
 '(global-origami-mode nil)
 '(helm-autoresize-mode t)
 '(helm-man-or-woman-function 'woman)
 '(helm-org-format-outline-path t)
 '(helm-prevent-escaping-from-minibuffer nil)
 '(help-window-select t)
 '(hl-line-sticky-flag nil)
 '(html-mode-hook '((lambda nil (auto-fill-mode -1) (setq sgml-xml-mode t))))
 '(indent-tabs-mode nil)
 '(indicate-buffer-boundaries 'right)
 '(indicate-empty-lines nil)
 '(inhibit-startup-screen t)
 '(initial-buffer-choice nil)
 '(initial-major-mode 'org-mode)
 '(initial-scratch-message nil)
 '(julia-indent-offset 2)
 '(julia-snail-multimedia-enable t)
 '(julia-snail-repl-display-eval-results t)
 '(line-spacing 0.1)
 '(lsp-clangd-binary-path "/usr/bin/clangd")
 '(lsp-clangd-version "15.0.3")
 '(lsp-clients-clangd-executable "/usr/bin/clangd")
 '(lsp-clients-deno-server "/home/fnaufel/.deno/bin/deno")
 '(lsp-keymap-prefix "s-i")
 '(magit-post-display-buffer-hook nil)
 '(markdown-code-lang-modes
   '(("ocaml" . tuareg-mode)
     ("elisp" . emacs-lisp-mode)
     ("ditaa" . artist-mode)
     ("asymptote" . asy-mode)
     ("dot" . fundamental-mode)
     ("sqlite" . sql-mode)
     ("calc" . fundamental-mode)
     ("C" . c-mode)
     ("cpp" . c++-mode)
     ("C++" . c++-mode)
     ("screen" . shell-script-mode)
     ("shell" . sh-mode)
     ("bash" . sh-mode)))
 '(max-lisp-eval-depth 1000)
 '(max-specpdl-size 3000)
 '(mc/mode-line '(" mc:" (:eval (format "%d" (mc/num-cursors)))))
 '(menu-bar-mode nil)
 '(minibuffer-auto-raise nil)
 '(org-M-RET-may-split-line '((default . t)))
 '(org-adapt-indentation t)
 '(org-agenda-custom-commands
   '(("i" "Initial"
      ((agenda "" nil)
       (alltodo ""
                ((org-agenda-sorting-strategy
                  '(priority-down todo-state-up)))))
      nil)))
 '(org-agenda-files "~/.agenda_files")
 '(org-agenda-include-diary t)
 '(org-agenda-loop-over-headlines-in-active-region nil)
 '(org-agenda-prefix-format
   '((agenda . " %i %-12:c%?-12t% s")
     (todo . " %+15:c  ")
     (tags . " %i %-12:c")
     (search . " %i %-12:c")))
 '(org-agenda-sorting-strategy
   '((agenda habit-down time-up priority-down category-keep)
     (todo time-up priority-down todo-state-up)
     (tags priority-down category-keep)
     (search category-keep)))
 '(org-agenda-span 'week)
 '(org-agenda-start-on-weekday 0)
 '(org-agenda-start-with-follow-mode nil)
 '(org-agenda-text-search-extra-files nil)
 '(org-agenda-todo-list-sublevels nil)
 '(org-agenda-window-setup 'current-window)
 '(org-ai-image-directory "/home/fnaufel/Pictures/org-ai-images/")
 '(org-ai-sd-directory "/home/fnaufel/Pictures/org-ai-images/")
 '(org-babel-load-languages '((emacs-lisp . t) (shell . t) (latex . t)))
 '(org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
 '(org-catch-invisible-edits nil)
 '(org-clock-clocktable-default-properties
   '(:maxlevel 3 :scope agenda :block thisweek :step day :fileskip0 t :link t :narrow 70! :hidefiles nil :formula % :stepskip0 t :tcolumns 1))
 '(org-clock-mode-line-total 'today)
 '(org-complete-tags-always-offer-all-agenda-tags t)
 '(org-confirm-elisp-link-function 'y-or-n-p)
 '(org-confirm-shell-link-function 'y-or-n-p)
 '(org-cycle-global-at-bob t)
 '(org-cycle-inline-images-display t)
 '(org-cycle-level-faces nil)
 '(org-cycle-separator-lines 1)
 '(org-deadline-warning-days 7)
 '(org-default-priority 40)
 '(org-directory "/home/fnaufel/Documents/OrgFiles/")
 '(org-duration-format '((special . h:mm)))
 '(org-ellipsis " ðŸ¡‡")
 '(org-export-latex-packages-alist '(("" "minted" t)))
 '(org-export-with-smart-quotes t)
 '(org-fold-catch-invisible-edits nil)
 '(org-footnote-auto-label 'confirm)
 '(org-footnote-section nil)
 '(org-format-latex-options
   '(:foreground default :background default :scale 1.8 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                 ("begin" "$1" "$" "$$" "\\(" "\\[")))
 '(org-hide-block-startup nil)
 '(org-hide-emphasis-markers nil)
 '(org-hide-leading-stars t)
 '(org-html-htmlize-output-type 'css)
 '(org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
 '(org-indent-mode-turns-off-org-adapt-indentation nil)
 '(org-journal-date-format "[%Y-%m-%d %A]")
 '(org-journal-date-prefix "* ")
 '(org-journal-dir "/home/fnaufel/Documents/OrgFiles/Journal")
 '(org-journal-enable-agenda-integration t)
 '(org-journal-file-format "%Y")
 '(org-journal-file-type 'yearly)
 '(org-journal-find-file 'find-file-other-window)
 '(org-journal-follow-mode t)
 '(org-journal-hide-entries-p nil)
 '(org-journal-mode-hook nil)
 '(org-journal-prefix-key "")
 '(org-journal-search-result-date-format "[%Y-%m-%d %A]")
 '(org-journal-start-on-weekday 7)
 '(org-journal-time-format "%R ")
 '(org-journal-time-prefix "
*** ")
 '(org-link-elisp-confirm-function 'y-or-n-p)
 '(org-link-search-must-match-exact-headline nil)
 '(org-link-shell-confirm-function 'y-or-n-p)
 '(org-log-done 'time)
 '(org-log-into-drawer t)
 '(org-lowest-priority 60)
 '(org-modern-hide-stars nil)
 '(org-modern-list nil)
 '(org-modern-priority nil)
 '(org-modern-star nil)
 '(org-modern-table t)
 '(org-modern-timestamp nil)
 '(org-modern-todo nil)
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-doi ol-eww ol-gnus ol-info org-inlinetask ol-irc ol-mhe ol-rmail ol-w3m org-collector))
 '(org-noter-doc-property-in-notes t)
 '(org-noter-hide-other nil)
 '(org-noter-separate-notes-from-heading t)
 '(org-num-face 'success)
 '(org-num-max-level 2)
 '(org-odd-levels-only t)
 '(org-outline-path-complete-in-steps nil)
 '(org-pretty-entities nil)
 '(org-priority-default 40)
 '(org-priority-highest 1)
 '(org-priority-lowest 60)
 '(org-refile-targets '((org-agenda-files :maxlevel . 10)))
 '(org-refile-use-outline-path 'file)
 '(org-return-follows-link t)
 '(org-reveal-history t)
 '(org-reveal-hlevel 2)
 '(org-reveal-mathjax t)
 '(org-reveal-mathjax-url
   "file:///home/fnaufel/.ipython/nbextensions/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
 '(org-reveal-plugins '(classList markdown highlight zoom notes search))
 '(org-reveal-root "/home/fnaufel/bin/reveal")
 '(org-reveal-theme "simple")
 '(org-reveal-transition "none")
 '(org-reverse-note-order t)
 '(org-special-ctrl-a/e t)
 '(org-src-window-setup 'split-window-right)
 '(org-startup-folded t)
 '(org-structure-template-alist
   '(("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("el" . "src emacs-lisp")
     ("e" . "example")
     ("E" . "export")
     ("h" . "export html")
     ("l" . "export latex")
     ("q" . "quote")
     ("s" . "src")
     ("sp" . "src python")
     ("v" . "verse")
     ("b" . "src bibtex")))
 '(org-superstar-cycle-headline-bullets nil)
 '(org-superstar-headline-bullets-list '("âœ±"))
 '(org-superstar-prettify-item-bullets nil)
 '(org-superstar-special-todo-items t)
 '(org-superstar-todo-bullet-alist
   '(("TODO" . 9744)
     ("NEXT" . 9744)
     ("STARTED" . 9744)
     ("DONE" . 9745)
     ("CANCELED" . 128473)
     ("default" . 9673)))
 '(org-table-convert-region-max-lines 99999)
 '(org-todo-keywords
   '((sequence "TODO(t!)" "NEXT(n!)" "STARTED(s!)" "|" "CANCELED(c!)" "DONE(d!)")))
 '(org-use-speed-commands t)
 '(origami-parser-alist
   '((java-mode . origami-java-parser)
     (c-mode . origami-c-parser)
     (c++-mode . origami-c-style-parser)
     (perl-mode . origami-c-style-parser)
     (cperl-mode . origami-c-style-parser)
     (js-mode . origami-c-style-parser)
     (js2-mode . origami-c-style-parser)
     (js3-mode . origami-c-style-parser)
     (go-mode . origami-c-style-parser)
     (php-mode . origami-c-style-parser)
     (python-mode . origami-python-parser)
     (emacs-lisp-mode . origami-elisp-parser)
     (lisp-interaction-mode . origami-elisp-parser)
     (clojure-mode . origami-clj-parser)
     (triple-braces .
                    #[257 "\303\304\305\306\307\300\301\302$\310\"\311\312%\207"
                          ["{{{" "}}}" "\\(?:\\(?:{{{\\|}}}\\)\\)" make-byte-code 257 "\304\302\"\305\303\300\301$\207" vconcat vector
                           [origami-get-positions origami-build-pair-tree]
                           7 "

(fn CONTENT)"]
                          10 "

(fn CREATE)"])))
 '(origami-show-fold-header nil)
 '(package-enable-at-startup nil)
 '(package-pinned-packages '((telega . "MELPA Stable")))
 '(package-selected-packages
   '(spacious-padding helm-system-packages org-ai texfrag dall-e-shell ob-dall-e-shell chatgpt-shell ob-chatgpt-shell csv-mode markdown-toc poly-R poly-noweb poly-org quarto-mode julia-snail ess edit-indirect flycheck-raku flycheck-pyflakes flycheck flycheck-julia epl magit magit-section vterm julia-mode julia-repl julia-shell julia-vterm lingva yasnippet-snippets ebib ob-raku raku-mode iedit helm-xref go-mode yafolding org-mime language-detection telega org-noter org-noter-pdftools json-mode org-clock-csv adaptive-wrap org-ref org-journal org-superstar helm-bibtex all-the-icons all-the-icons-dired all-the-icons-gnus major-mode-hydra pretty-hydra paradox buffer-move rainbow-delimiters company-box setup use-package which-key ac-js2 skewer-mode company-web web-mode web-mode-edit-element git-timemachine bash-completion yaml-mode all auctex auto-complete-auctex calfw calfw-org helm-org system-packages org-ac xonsh-mode js2-mode anzu helpful info-colors js-comint nodejs-repl typo web-beautify markdown-preview-mode lua-mode htmlize dash-functional multiple-cursors expand-region))
 '(paradox-execute-asynchronously t)
 '(paradox-github-token t)
 '(pdf-annot-activate-created-annotations t)
 '(pdf-annot-list-listed-types
   '(file free-text highlight popup squiggly strike-out text underline unknown))
 '(pdf-info-epdfinfo-program
   "/home/fnaufel/.emacs.d/elpa/pdf-tools-20230611.239/epdfinfo")
 '(pdf-tools-enabled-modes
   '(pdf-history-minor-mode pdf-isearch-minor-mode pdf-links-minor-mode pdf-misc-minor-mode pdf-outline-minor-mode pdf-misc-size-indication-minor-mode pdf-annot-minor-mode pdf-sync-minor-mode pdf-misc-context-menu-minor-mode pdf-cache-prefetch-minor-mode pdf-occur-global-minor-mode))
 '(pdf-view-continuous nil)
 '(projectile-track-known-projects-automatically nil)
 '(python-indent-offset 2)
 '(python-shell-interpreter "python3")
 '(rcirc-authinfo '(("freenode" nickserv "SagAllesAb" "54g4ll354b")))
 '(rcirc-default-full-name "Sag alles ab!")
 '(rcirc-default-nick "sag_alles_ab" t)
 '(rcirc-default-user-name "SagAllesAb")
 '(rcirc-multiline-major-mode 'org-mode)
 '(recentf-max-menu-items 100)
 '(recentf-max-saved-items 100)
 '(recentf-mode t)
 '(safe-local-variable-values
   '((polymode-default-inner-mode . "julia-mode")
     (polymode-default-inner-mode . "julia")
     (eval add-hook 'after-save-hook
           (lambda nil
             (my/tangle-async))
           nil t)
     (require-final-newline)
     (org-confirm-babel-evaluate)))
 '(scroll-bar-mode nil)
 '(scroll-conservatively 50)
 '(scroll-preserve-screen-position 1)
 '(select-active-regions nil)
 '(select-enable-clipboard t)
 '(sentence-end-double-space nil)
 '(sgml-xml-mode t)
 '(shell-file-name "/bin/bash")
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(smartparens-global-mode t)
 '(sml-modeline-borders nil)
 '(sml-modeline-mode t)
 '(sp-navigate-interactive-always-progress-point t)
 '(split-height-threshold 80)
 '(sunrise-confirm-kill-viewer nil)
 '(sunrise-cursor-follows-mouse nil)
 '(sunrise-init-hook '(sunrise-mouse-disown-cursor))
 '(sunrise-listing-switches
   "--time-style=+[%Y-%m-%d-%H:%M] --group-directories-first -alDhG")
 '(sunrise-mode-hook '(sunrise-mark-sync))
 '(sunrise-modeline-use-utf8-marks t)
 '(sunrise-popviewer-enabled t)
 '(sunrise-popviewer-mode t)
 '(sunrise-popviewer-style 'multiple-frames)
 '(sunrise-quit-hook '(sunrise-quit-function))
 '(sunrise-terminal-program "bash")
 '(sunrise-traditional-other-window t)
 '(sunrise-tree-isearch-always-sticky t)
 '(sunrise-use-commander-keys nil)
 '(sunrise-visit-buffer-function 'display-buffer-other-frame)
 '(sunrise-window-split-style 'horizontal)
 '(sunrise-windows-default-ratio 75)
 '(sunrise-windows-locked nil)
 '(tab-width 4)
 '(telega-completing-read-function 'helm--completing-read-default)
 '(telega-emoji-animated-play nil)
 '(telega-emoji-font-family "")
 '(telega-emoji-use-images nil)
 '(telega-msg-save-dir "/home/fnaufel/Downloads")
 '(telega-rainbow-saturation '(90 . 90))
 '(term-mode-hook '((lambda nil (yas-minor-mode -1))))
 '(texfrag-scale 1.1)
 '(tool-bar-mode nil)
 '(user-full-name "")
 '(vc-follow-symlinks t)
 '(visual-fill-column-enable-sensible-window-split nil)
 '(woman-use-own-frame nil)
 '(xterm-color-use-bold-for-bright t)
 '(yas-prompt-functions
   '(shk-yas/helm-prompt yas-dropdown-prompt yas-completing-prompt yas-maybe-ido-prompt yas-no-prompt))
 '(yas-snippet-dirs
   '("/home/fnaufel/.emacs.d/snippets" "/usr/share/yasnippet-snippets" yasnippet-snippets-dir "/home/fnaufel/Stow/emacs/.emacs.d/elpa/org-ai-20230910.1314/snippets")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(anzu-mode-line ((t (:foreground "medium spring green" :weight bold))))
 '(calendar-today ((t (:inverse-video t :underline nil))))
 '(cfw:face-toolbar ((t (:background "black" :foreground "black"))))
 '(cfw:face-toolbar-button-off ((t (:foreground "dim gray" :weight bold))))
 '(cfw:face-toolbar-button-on ((t (:foreground "light gray" :weight bold))))
 '(fringe ((t :background "black")))
 '(header-line ((t :box (:line-width 4 :color "grey20" :style nil))))
 '(header-line-highlight ((t :box (:color "bisque"))))
 '(highlight-indent-face ((t (:background "dark gray"))))
 '(line-number ((t :background "black")))
 '(mode-line ((t :box (:line-width 4 :color "grey75" :style nil))))
 '(mode-line-active ((t)))
 '(mode-line-highlight ((t :box (:color "bisque"))))
 '(mode-line-inactive ((t :box (:line-width 4 :color "grey30" :style nil))))
 '(mu4e-context-face ((t (:background "RoyalBlue3" :foreground "white smoke" :weight bold))))
 '(mu4e-modeline-face ((t (:background "maroon" :foreground "white smoke" :weight bold))))
 '(org-block ((t (:background "gray15"))))
 '(org-block-begin-line ((t (:inherit org-meta-line :background "#103030"))))
 '(org-ellipsis ((t (:foreground "LightGoldenrod" :underline nil))))
 '(org-journal-calendar-entry-face ((t (:foreground "#bbbb00" :slant italic))))
 '(org-journal-calendar-scheduled-face ((t (:foreground "#ff0000" :slant italic))))
 '(org-modern-block-keyword ((t (:weight light :height 0.9))))
 '(org-modern-label ((t (:inherit variable-pitch :box (:line-width -3 :color "black") :underline nil :weight regular :height 1.0 :width condensed))))
 '(org-modern-symbol ((t (:height 1.1 :family "Hack"))) t)
 '(org-noter-no-notes-exist-face ((t (:foreground "blue" :weight bold))))
 '(org-noter-notes-exist-face ((t (:foreground "tomato4" :weight bold))))
 '(org-ref-cite-face ((t (:inherit org-link :foreground "pale green"))))
 '(paradox-mode-line-face ((t (:inherit (font-lock-keyword-face mode-line-buffer-id) :foreground "medium blue" :weight normal))))
 '(rainbow-delimiters-base-error-face ((t (:inherit rainbow-delimiters-base-face :foreground "red"))))
 '(rainbow-delimiters-base-face ((t (:inherit default))))
 '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "gray90"))))
 '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "deep sky blue"))))
 '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "lawn green"))))
 '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow2"))))
 '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "violet"))))
 '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "CadetBlue3"))))
 '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
 '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "light salmon"))))
 '(sunrise-active-path-face ((t (:background "dark blue" :foreground "yellow" :weight bold :height 120))))
 '(sunrise-html-face ((t (:foreground "green yellow"))))
 '(sunrise-log-face ((t (:foreground "goldenrod"))))
 '(sunrise-packaged-face ((t (:foreground "magenta"))))
 '(sunrise-passive-path-face ((t (:background "dark gray" :foreground "black" :weight bold :height 120))))
 '(sunrise-xml-face ((t (:foreground "medium spring green"))))
 '(tab-bar-tab ((t :box (:line-width 4 :color "grey85" :style nil))))
 '(tab-bar-tab-inactive ((t :box (:line-width 4 :color "grey75" :style nil))))
 '(telega-msg-heading ((t (:background "gray25" :overline "white" :underline "white" :weight extra-bold :height 1.1))))
 '(telega-msg-inline-forward ((t (:background "gray25" :slant italic))))
 '(telega-msg-inline-reply ((t (:background "gray25" :slant italic))))
 '(term ((t (:inherit default))))
 '(window-divider ((t :background "black" :foreground "black")))
 '(window-divider-first-pixel ((t :background "black" :foreground "black")))
 '(window-divider-last-pixel ((t :background "black" :foreground "black"))))
