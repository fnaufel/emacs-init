; -*- mode: Org; eval: (add-hook 'after-save-hook (lambda () (my/tangle-async)) nil t) -*-
#+title: fnaufel emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ~/Stow/emacs/.emacs.d/init.el

* Warn about modifying file

  #+begin_src emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;
    ;;;                      ATTENTION
    ;;;
    ;;; This file was automatically generated by org-babel-tangle
    ;;; from file /home/fnaufel/Stow/emacs/dot-emacs.org.
    ;;;
    ;;; DO NOT MODIFY THIS FILE.
    ;;;
    ;;; To change these configs, edit
    ;;; /home/fnaufel/Stow/emacs/dot-emacs.org instead.
    ;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  #+end_src

* Profile emacs init

*** See https://github.com/daviwil/emacs-from-scratch

     #+begin_src emacs-lisp
       ;; The default is 800 kilobytes.  Measured in bytes.
       (setq gc-cons-threshold (* 100 1000 1000))

       ;; Profile emacs startup
       (add-hook 'emacs-startup-hook
                 (lambda ()
                   (message "*** Emacs loaded in %s with %d garbage collections."
                            (emacs-init-time)
                            gcs-done)))
     #+end_src

* Tangle this init file

  + The comment on the first line of this file sets a local
    after-save-hook to call these functions.

    #+begin_src emacs-lisp
      (defun my/tangle-async ()
          "Tangle asynchronously current file."
          (let ((file (buffer-file-name)))
            (async-start
             `(lambda ()
                (require 'org)
                (org-babel-tangle-file ,file))
             `(lambda (result)
                (message (format "tangle-async finished for: %s" result))))))   
    #+end_src

* Save customize customizations in separate file

  #+begin_src emacs-lisp
    (setq custom-file "~/Stow/emacs/.emacs.d/.emacs-custom.el")
    (load custom-file)
  #+end_src

* Start server

  #+begin_src emacs-lisp
    (server-start)
  #+end_src

* Initialize package system and load path

  #+begin_src emacs-lisp
    (require 'package)

    (setq package-archives
          '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
            ("MELPA Stable" . "https://stable.melpa.org/packages/")
            ("MELPA"        . "https://melpa.org/packages/"))
          package-archive-priorities
          '(("MELPA Stable" . 0)
            ("GNU ELPA"     . 5)
            ("MELPA"        . 10)))

    (package-initialize)

    (add-to-list 'load-path "/home/fnaufel/.emacs.d/lisp/")

    ;; (package-refresh-contents)

    (require 'paradox)
    (paradox-enable)
  #+end_src
  
* Icons

  #+begin_src emacs-lisp
    (require 'all-the-icons)
  #+end_src

* Org mode

*** autolist

     #+begin_src emacs-lisp
       (require 'org-autolist)
       (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
     #+end_src
    
*** org-modern

    #+begin_src emacs-lisp
      (require 'org-modern)

      (global-org-modern-mode)
    #+end_src

*** superstar

     #+begin_src emacs-lisp
       ;; org-superstar
       (require 'org-superstar)
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

       ;; set basic title font
       (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default :foreground "dark orange")

       ;; ;; Low levels are unimportant => no scaling
       (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.05) 
       (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.1) 
       (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.15) 
     #+end_src
    
*** org-bars (disabled)

     #+begin_src emacs-lisp
       ;; (require 'org-bars)
       ;; (add-hook 'org-mode-hook #'org-bars-mode)

       ;; ;; No ellipsis in headlines
       ;; (defun org-no-ellipsis-in-headlines ()
       ;;   "Remove use of ellipsis in headlines.
       ;; See `buffer-invisibility-spec'."
       ;;   (remove-from-invisibility-spec '(outline . t))
       ;;   (add-to-invisibility-spec 'outline))

       ;; (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines)

       ;; Fix this function to handle blank, non-empty entries
       ;; (defun org-bars-subtree-is-empty-p ()
         ;; "Return t if subtree at point is empty."
         ;; (let ((entry (org-get-entry)))
           ;; (set-text-properties 0 (length entry) nil entry)
           ;; (string-blank-p entry)))
      #+end_src

*** calfw

      #+begin_src emacs-lisp
         (require 'calfw)
         (require 'calfw-org)

         (global-set-key (kbd "s-c") 'cfw:open-org-calendar)

         ;; use org agenda buffer style keybinding.
         (setq cfw:org-overwrite-default-keybinding t) 
      #+end_src
    
*** Key bindings

***** General

        #+begin_src emacs-lisp
          (add-hook 'org-load-hook
                    (lambda ()
                      (define-key org-mode-map (kbd "C-c C-x i") 'org-insert-columns-dblock)
                      (define-key org-mode-map (kbd "C-<return>") nil)
                      (define-key org-mode-map (kbd "C-M-<return>") 'org-insert-heading-respect-content)))

          ;;; Shorter key bindings for next and previous link
          (define-key org-mode-map (kbd "C-n") 'org-next-link)
          (define-key org-mode-map (kbd "C-p") 'org-previous-link)

          (require 'org-id)
          (define-key org-mode-map (kbd "C-c C-k") 'org-store-link)
          (define-key org-mode-map (kbd "C-c k") 'org-store-link)
          (global-set-key (kbd "C-c C-k") 'org-store-link)
          (global-set-key (kbd "C-c k") 'org-store-link)
          
          (global-set-key "\C-ca" 'org-agenda)
        #+end_src
    
***** helm integration

        #+begin_src emacs-lisp
          ;;; helm-org
          (define-key org-mode-map (kbd "C-c j") 'helm-org-in-buffer-headings)
          (define-key org-mode-map (kbd "C-c C-j") 'helm-org-in-buffer-headings)
          (define-key org-mode-map (kbd "C-c i") 'helm-org-parent-headings)
          (define-key org-mode-map (kbd "C-c g") 'helm-org-agenda-files-headings)
        #+end_src
    
***** hydra and friends

        #+begin_src emacs-lisp
          (require 'hydra)
          (require 'major-mode-hydra)
          (require 'pretty-hydra)

          (defun with-faicon (icon str &optional height v-adjust)
            (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

          (defun with-fileicon (icon str &optional height v-adjust)
            (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

          (defun with-octicon (icon str &optional height v-adjust)
            (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

          (defun with-material (icon str &optional height v-adjust)
            (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

          (defun with-mode-icon (mode str &optional height nospace face)
            (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) 0.0 0.05))
                   (args     `(:height ,(or height 1) :v-adjust ,v-adjust))
                   (_         (when face
                                (lax-plist-put args :face face)))
                   (icon     (apply #'all-the-icons-icon-for-mode mode args))
                   (icon     (if (symbolp icon)
                                 (apply #'all-the-icons-octicon "file-text" args)
                               icon)))
              (s-concat icon (if nospace "" " ") str)))
        #+end_src

*** Audio and video links

     #+begin_src emacs-lisp
       (defun convert-hhmmss-to-secs (time)
         "Receives a string of digits TIME of the form h...hhmmss and
         returns the corresponding total number of seconds. If TIME is
         nil, or the empty string, return nil." 
  
         (unless (or (null time)(string= time ""))
           (let ((secs (string-to-int time))   ; if only secs, this is enough
                 (mins 0)
                 (hrs 0)
                 (l (length time)))
             (when (> l 2)                     ; there are minutes!
               (progn 
                 (setq secs (string-to-int (substring time -2)))     ; must correct secs
                 (setq mins (string-to-int (substring time 0 -2))))) ; if no hours, enough
             (when (> l 4)                     ; there are hours!
               (progn 
                 (setq mins (string-to-int (substring time -4 -2))) ; must correct minutes
                 (setq hrs (string-to-int (substring time 0 -4))))) ; get hours
             (+ secs (* 60 mins) (* 3600 hrs)))))

       (defvar video-link-function 'gmplayer-seek 
         "*Function used in org mode to open video links.")

       (defun gmplayer-seek (file &optional time1 time2)
         "Start asynchronous instance of gnome-mplayer to play FILE,
         optionally starting from time TIME1 and ending at time TIME2.
         Both time arguments are of the form h...hhmmss (with no
         separators). If fewer than 6 digits are present, those present
         are the least significant; e.g., 123 = 1 minute and 23 seconds."
  
         (let ((t1 (convert-hhmmss-to-secs time1))
               (t2 (convert-hhmmss-to-secs time2))) 
           (cond ((and t1 t2)                ; recall t2 is end time
                  (setq t2 (- t2 t1))        ; make t2 duration of playback
                  (message "Opening %s  (from %s to %s)" file time1 time2)
                  (start-process "org-gmplayer"                     ; process name
                                 (concat file "::" time1 "-" time2) ; buffer name
                                 "/usr/bin/gnome-mplayer"           ; program
                                 "--ss"                             ; args
                                 (int-to-string t1)
                                 "--endpos" 
                                 (int-to-string t2)
                                 "-v"
                                 file))
                 (t1 
                  (message "Opening %s  (from %s)" file time1)
                  (start-process "org-gmplayer" 
                                 (concat file "::" time1) 
                                 "/usr/bin/gnome-mplayer"
                                 "--ss" 
                                 (int-to-string t1)
                                 "-v"
                                 file))
                 (t 
                  (message "Opening %s" file)
                  (start-process "org-gmplayer" 
                                 file 
                                 "/usr/bin/gnome-mplayer"
                                 "-v"
                                 file)))))
                    
       (defvar audio-link-function 'audacious-seek 
         "*Function used in org mode to open audio links.")

       (defun audacious-seek (file &optional time1)
         "Start asynchronous instance of audacious to play FILE,
         optionally starting from time TIME1. The TIME1 argument is of
         the form h...hhmmss (with no separators). If fewer than 6
         digits are present, those present are the least significant;
         e.g., 123 = 1 minute and 23 seconds."
  
         (let ((t1 (convert-hhmmss-to-secs time1)))
           (cond (t1 
                  (message "Opening %s  (from %s)" file time1)
                  (start-process "org-audacious" 
                                 (concat file "::" time1) 
                                 "/usr/bin/audacious"
                                 file)
                  (sleep-for 0 500)
                  (start-process "org-audtool" 
                                 (concat file "::" time1) 
                                 "/usr/bin/audtool"
                                 "playback-seek"
                                 (int-to-string t1)))
                 (t 
                  (message "Opening %s" file)
                  (start-process "org-audacious" 
                                 file 
                                 "/usr/bin/audacious"
                                 file)))))
     #+end_src
    
*** org-journal

     #+begin_src emacs-lisp
       (require 'org-journal)

       (global-unset-key (kbd "C-c C-j"))
       (global-set-key (kbd "C-c s") 'org-journal-search)
       (global-set-key (kbd "C-J") 'org-journal-new-entry)
       (define-key org-mode-map (kbd "C-J") 'org-journal-new-entry)
     #+end_src
    
*** Export subtree as html fragment to clipboard
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2021-12-16 Thu 14:30]
    - State "STARTED"    from              [2021-12-15 Wed 18:31]
    :END:

    #+begin_src emacs-lisp
      (defun subtree-html-export-to-clipboard ()
        "Export current subtree to html fragment and put in clipboard."
        (interactive)

        (let ((only-window (one-window-p)))
          (org-html-export-as-html nil t t t)
          (kill-ring-save (point-min) (point-max))
          (kill-buffer (current-buffer))
          (message "Subtree copied as HTML to clipboard.")
          (if only-window
              (delete-window)
            (other-window -1))))

      (define-key org-mode-map (kbd "<f9>") 'subtree-html-export-to-clipboard)
    #+end_src

*** Export to json

    + From https://github.com/mattduck/org-toggl-py/blob/master/org-export-json.el

      #+begin_src emacs-lisp
        ;; Provides function to export current org buffer as JSON structure
        ;; to $file.org.json. Adapted from an org-mode mailing post by
        ;; Brett Viren: https://lists.gnu.org/archive/html/emacs-orgmode/2014-01/msg00338.html
        (require 'json)

        (defun org-export-json ()
          (interactive)
          (let* ((tree (org-element-parse-buffer 'object nil)))
            (org-element-map tree (append org-element-all-elements
                                          org-element-all-objects '(plain-text))
              (lambda (x)
                (if (org-element-property :parent x)
                    (org-element-put-property x :parent "none"))
                (if (org-element-property :structure x)
                    (org-element-put-property x :structure "none"))
                ))
            (write-region
             (json-encode tree)
             nil (concat (buffer-file-name) ".json"))))

        (defun cli-org-export-json ()
          (let ((org-file-path (car command-line-args-left))
                (other-load-files (cdr command-line-args-left)))
            (mapc 'load-file other-load-files)
            (find-file org-file-path)
            (org-mode)
            (message "Exporting to JSON: %s" (car command-line-args-left))
            (org-export-json)))
      #+end_src

*** Bibliographies
    :PROPERTIES:
    :ID:       3a6ade3c-860d-435a-8b39-d68a25f2b5c7
    :END:

    #+begin_src emacs-lisp
      (require 'helm-bibtex)
      (require 'bibtex)
      (require 'org-zotxt-noter)

      (setq
       ;; If bibtex-completion-pdf-field is non-nil, bibtex-completion will
       ;; first try to retrieve the file specified in this field. If the
       ;; field is not set for an entry or if the specified file does not
       ;; exists, bibtex-completion falls back to the method described above
       ;; (searching for key + .pdf in the directories listed in
       ;; bibtex-completion-library-path).
       bibtex-completion-pdf-field "file"
       bibtex-completion-bibliography '("/home/fnaufel/Documents/OrgFiles/bibliography.bib")
       bibtex-completion-library-path '("/home/BooksAndArticles/")
       bibtex-completion-notes-path "/home/fnaufel/Documents/OrgFiles/bibnotes.org"
       bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
       bibtex-completion-additional-search-fields '(keywords)
       bibtex-completion-display-formats
       '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
         (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
         (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
         (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
         (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
       bibtex-completion-pdf-open-function 'find-file-other-frame)

      (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator "-"
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 2
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5)

      (require 'helm-config)

      ;;; Add action to open pdf in Okular
      (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)

        (let ((bibtex-completion-pdf-open-function
               (lambda (fpath) (start-process "okular" "*helm-bibtex-okular*" "/usr/bin/okular" fpath))))
          (bibtex-completion-open-pdf keys fallback-action)))

      (helm-bibtex-helmify-action bibtex-completion-open-pdf-external helm-bibtex-open-pdf-external)

      (helm-add-action-to-source
       "Open file in Okular"
       'helm-bibtex-open-pdf-external
       helm-source-bibtex
       1)

      ;;; Key bindings
      (global-set-key (kbd "s-b") 'helm-command-prefix)

      (define-key helm-command-map "b" 'helm-bibtex)
      (define-key helm-command-map "B" 'helm-bibtex-with-local-bibliography)
      (define-key helm-command-map "n" 'helm-bibtex-with-notes)
      (define-key helm-command-map (kbd "s-b") 'helm-resume)
    #+end_src

*** Misc (incl. hooks)

     #+begin_src emacs-lisp
       ;; Turn on Auto Fill mode automatically in Org mode
       (add-hook 'org-mode-hook
                 '(lambda ()
                    (turn-on-auto-fill)))

       ;; Auto numbering of headlines
       (add-hook 'org-mode-hook (lambda () (org-num-mode)))

       ;; org-zotxt
       (add-hook 'org-mode-hook (lambda () (org-zotxt-mode)))

       ;; org-tempo
       (require 'org-tempo)

       ;;; Associate .org files to org mode
       (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

       ;;; Associate claws-mail compose files to org mode
       (add-to-list 'auto-mode-alist '("\\.0x.*$" . org-mode))

       ;;; Clock
       (setq org-clock-persist t)
       (org-clock-persistence-insinuate)

       (defun update-clock-tables ()
         "Visit todo.org, update all dynamic blocks there, and save."

         (find-file "/home/fnaufel/Documents/OrgFiles/todo.org")
         (org-show-all '(headings))
         (org-update-all-dblocks)
         (save-buffer))

       ;;; cdlatex mode (disabled)
       ;;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

       ;;; Images
       (setq org-startup-with-inline-images t)
       (setq org-image-actual-width 600)
    #+end_src

*** Zotero hydra

     #+begin_src emacs-lisp
       (setq hydra-zot--title
             (with-faicon "book" "Zotero" 1 -0.05))

       (pretty-hydra-define hydra-zot
         (:quit-key "q" :title hydra-zot--title :foreign-keys warn :exit t)
         (""
          (("i" (org-zotxt-insert-reference-link) "Insert link ")
           ("u" (org-zotxt-update-reference-link-at-point) "Update link ")
           ("a" (org-zotxt-open-attachment) "Open attachment "))

          "Quit"
          (("q" nil "quit "))))

       (global-set-key (kbd "s-z") 'hydra-zot/body)
     #+end_src

* IPython and jupyter

  #+begin_src emacs-lisp
    (defun ipython-qtconsole ()
      (interactive)
      (async-shell-command
       (concat
        "/ssd/miniconda/envs/r-reticulate/bin/jupyter qtconsole "
        "--ConsoleWidget.font_family=\"JetBrains Mono\" --ConsoleWidget.font_size=14 "
        "--JupyterWidget.editor=\"emacscli\" --paging=hsplit "
        "--gui-completion=droplist --style=monokai"
       )
       "jupyter-qt-output"))

    (defun ipython-notebook-int ()
      (interactive)
      (let ((df (read-file-name "Notebook dir or file: ")))
        (ipython-notebook df)))

    (defun ipython-notebook (df)
      (interactive)
      (async-shell-command 
       (concat "/ssd/miniconda/envs/r-reticulate/bin/jupyter notebook "
               "--notebook-dir=" df)
       "jupyter-notebook-output"))
  #+end_src
  
* UI

*** Visual line mode (disabled)

    + Emacs hangs whenever I change the frame size in Openbox.

    #+begin_src emacs-lisp
      ;; (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
      ;; (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
      ;; (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
      ;; (setq visual-fill-column-enable-sensible-window-split t)
      ;; (setq-default visual-fill-column-width 69)
      ;; ;;(setq-default visual-fill-column-center-text t)
    #+end_src

*** Super key + number generates digit arguments

     #+begin_src emacs-lisp
       (global-set-key (kbd "s--") 'negative-argument)
       (global-set-key (kbd "s-0") 'digit-argument)
       (global-set-key (kbd "s-1") 'digit-argument)
       (global-set-key (kbd "s-2") 'digit-argument)
       (global-set-key (kbd "s-3") 'digit-argument)
       (global-set-key (kbd "s-4") 'digit-argument)
       (global-set-key (kbd "s-5") 'digit-argument)
       (global-set-key (kbd "s-6") 'digit-argument)
       (global-set-key (kbd "s-7") 'digit-argument)
       (global-set-key (kbd "s-8") 'digit-argument)
       (global-set-key (kbd "s-9") 'digit-argument)
     #+end_src

     #+RESULTS:
     : digit-argument

*** Menubar

     #+begin_src emacs-lisp
       (menu-bar-mode 0)
     #+end_src

*** Frame font

     #+begin_src emacs-lisp
       ;;; Set font
       (defun fontify-frame (frame)
         (set-frame-parameter frame 'font "Cousine-13")
         (set-frame-parameter frame 'background-color "black")
         (set-frame-parameter frame 'foreground-color "bisque"))

       ;;; Fontify current frame
       (fontify-frame nil)

       ;;; Fontify any future frames
       (push 'fontify-frame after-make-frame-functions)

       ;;; These are set in Customize
       ;;; (add-to-list 'default-frame-alist '(foreground-color . "bisque"))
       ;;; (add-to-list 'default-frame-alist '(background-color . "black"))
     #+end_src
    
*** Icons

     #+begin_src emacs-lisp
       (require 'all-the-icons)
     #+end_src

*** which-key

     + When a prefix key is typed, show possible next keys.

       #+begin_src emacs-lisp
         (require 'which-key)
         (which-key-mode)
       #+end_src

*** anzu

     + Show number of matches during isearch.

       #+begin_src emacs-lisp
         (require 'anzu)
         (global-anzu-mode +1)
       #+end_src

*** helpful

     #+begin_src emacs-lisp
       (require 'helpful) 

       ;; Note that the built-in `describe-function' includes both functions
       ;; and macros. `helpful-function' is functions only, so we provide
       ;; `helpful-callable' as a drop-in replacement.
       (global-set-key (kbd "C-h f") #'helpful-callable)
       (global-set-key (kbd "C-h v") #'helpful-variable)
       (global-set-key (kbd "C-h k") #'helpful-key)

       ;; Lookup the current symbol at point. C-c C-d is a common keybinding
       ;; for this in lisp modes.
       (global-set-key (kbd "C-c C-d") #'helpful-at-point)

       ;; Look up *F*unctions (excludes macros).
       ;;
       ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
       ;; already links to the manual, if a function is referenced there.
       (global-set-key (kbd "C-h F") #'helpful-function)

       ;; Look up *C*ommands.
       ;;
       ;; By default, C-h C is bound to describe `describe-coding-system'. I
       ;; don't find this very useful, but it's frequently useful to only
       ;; look at interactive functions.
       (global-set-key (kbd "C-h C") #'helpful-command)
     #+end_src

*** info-colors

     #+begin_src emacs-lisp
       (require 'info-colors)
       (add-hook 'Info-selection-hook 'info-colors-fontify-node)
     #+end_src

*** expand-region

     #+begin_src emacs-lisp
       (require 'expand-region)
       (global-set-key (kbd "C-+") 'er/expand-region)
     #+end_src
    
*** smart-parens

     #+begin_src emacs-lisp
       (require 'smartparens-config)
       (smartparens-global-mode 1)
       (show-smartparens-global-mode t)

       ;;; markdown-mode etc
       (sp-with-modes '(markdown-mode gfm-mode rst-mode org-mode)
         (sp-local-pair "*" "*")
         (sp-local-pair "/" "/")
       ;  (sp-local-pair "_" "_")
       )

       (defun sp-select-up ()
         (interactive)

         (sp-backward-up-sexp)
         (sp-select-next-thing)
       )

       (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)
       (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)

       (define-key smartparens-mode-map (kbd "C-S-p") 'sp-previous-sexp)
       (define-key smartparens-mode-map (kbd "C-S-n") 'sp-next-sexp)

       (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
       (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)

       (define-key smartparens-mode-map (kbd "C-S-a") 'sp-beginning-of-sexp)
       (define-key smartparens-mode-map (kbd "C-S-e") 'sp-end-of-sexp)

       (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

       (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
       (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

       (define-key smartparens-mode-map (kbd "C-]") 'sp-select-up)
       (define-key smartparens-mode-map (kbd "C-}") 'sp-select-next-thing)
     #+end_src
    
*** multiple-cursors

     #+begin_src emacs-lisp
       (require 'multiple-cursors)

       ;; When you have an active region that spans multiple lines, the
       ;; following will add a cursor to each line:
       (global-set-key (kbd "C-|") 'mc/edit-lines)

       ;; When you want to add multiple cursors not based on continuous
       ;; lines, but based on keywords in the buffer, use the keys below.
       ;; First mark the word, then add more cursors.
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-?") 'mc/mark-all-like-this-dwim)
       (global-set-key (kbd "C-.") 'mc/mark-sgml-tag-pair)

       ;; To get out of multiple-cursors-mode, press `<return>` or `C-g`. The
       ;; latter will first disable multiple regions before disabling
       ;; multiple cursors.

       ;; If you want to insert a newline in multiple-cursors-mode, use
       ;; `C-j`.
     #+end_src
    
*** sml-modeline

     #+begin_src emacs-lisp
       (if (require 'sml-modeline nil 'noerror)    ;; use sml-modeline if available
         (progn 
           (sml-modeline-mode 1)                   ;; show buffer pos in the mode line
           (scroll-bar-mode -1))                   ;; turn off the scrollbar
         (scroll-bar-mode 1)                       ;; otherwise, show a scrollbar...
         (set-scroll-bar-mode 'right))             ;; ... on the right
     #+end_src
    
*** Recent files

     #+begin_src emacs-lisp
       ;; Enable recent files menu
       (recentf-mode)

       ;; ffap-bindings binds C-x C-r to ffap-read-only.
       ;; I prefer to have it bound to recentf-open-files.
       (global-set-key "\C-x\C-r" 'recentf-open-files)
     #+end_src
    
*** Copy or duplicate line

     #+begin_src emacs-lisp
       ;;; Copy line at point
       (defun copy-line ()
         "Copy line at point."
         (interactive)
         (save-excursion
           (setq text (thing-at-point 'line t))
           (kill-new text)
           (princ "Line copied to kill ring." t)))

       (global-set-key (kbd "C-s-<up>") 'copy-line)

       ;;; Duplicate line
       (defun duplicate-line ()
         "Duplicate line at point on a new line below. Point remains in original line."
         (interactive)
         (save-excursion
           (setq text (thing-at-point 'line t))
           (when (string-suffix-p "\n" text)
             (setq text (substring text 0 -1)))
           (move-end-of-line nil)
           (insert (concat "\n" text))))
 
       (global-set-key (kbd "C-s-<down>") 'duplicate-line)
     #+end_src
    
*** Generate numbered lines

     #+begin_src emacs-lisp
       ;;; Generate numbered items (one per line) according to template 
       (defun gen-numbered-items (first last template)
         "Generate numbered items (one per line) according to template."

         (interactive "*nFirst number: \nnLast number: \nMTemplate: ")
  
         (setq i first)
         (while (not (> i last))
           (progn
             (insert (format template i) "\n")
             (setq i (1+ i)))))
     #+end_src
    
*** Jump (using hydra)

     #+begin_src emacs-lisp
       (setq hydra-fnjump--title
             (with-faicon "map-signs" "Important places" 1 -0.05))

       (pretty-hydra-define hydra-fnjump
         (:quit-key "q" :title hydra-fnjump--title :foreign-keys warn :exit t)
         ("Jump to"
          (("e" (find-file "~/Documents/OrgFiles/mail.org") "email ")
           ("b" (find-file "~/.bashrc") ".bashrc ")
           ("p" (find-file "~/.profile") ".profile ")
           ("s" (find-file "~/Stow") "Stow ")
           ("c" (find-file "~/Stow/emacs/.emacs.d/.emacs-custom.el") "custom.el ")
           ("i" (find-file "~/Stow/emacs/dot-init.org") "init ")
           ("t" (update-clock-tables) "clock tables ")
           ("x" (ansi-term "/home/fnaufel/.local/bin/xonsh" "xonsh") "new xonsh ")
           ("j" (ipython-notebook-int) "jupyter")
           ("y" (ipython-qtconsole) "ipython"))

          "Quit"
          (("q" nil "quit "))))

       (global-set-key (kbd "s-j") 'hydra-fnjump/body)
     #+end_src
    
*** Browse kill ring

     #+begin_src emacs-lisp
       (defadvice yank-pop (around kill-ring-browse-maybe (arg))
         "If last action was not a yank, run `browse-kill-ring' instead."
         (if (not (eq last-command 'yank))
             (browse-kill-ring)
           ad-do-it))

       (ad-activate 'yank-pop)
     #+end_src
    
*** auto-fill

     #+begin_src emacs-lisp
       ;; Turn on Auto Fill mode automatically in Text mode and related modes
       (add-hook 'text-mode-hook
                 '(lambda () (turn-on-auto-fill)))
     #+end_src
    
*** Non-ASCII keys

     #+begin_src emacs-lisp
       (require 'iso-transl)

       ;;; Insert nobreakspace
       (defun insert-nbsp ()
         "Insert nobreakspace (code 160)"
         (interactive)
         (insert 160)
       )

       (global-set-key (kbd "C-;") 'insert-nbsp)
     #+end_src
    
*** Movement

     #+begin_src emacs-lisp
       ;;; Position point at window center, top, bottom
       (defvar cycle-window-line-last-op 'middle
         "Indicates the last cycle-window-line operation performed.
       Possible values: `top', `middle', `bottom'.")

       (defun cycle-window-line (&optional arg)
         "Move point to window center, bottom, and top, successively.

       A prefix argument is handled like `move-to-window-line':
        With numeric prefix ARG, move point to window-line ARG."

         (interactive "P")
         (cond
          (arg (move-to-window-line arg))                 ; Always respect ARG.
          ((or (not (eq this-command last-command))
           (eq cycle-window-line-last-op 'top))
           (setq cycle-window-line-last-op 'middle)
           (move-to-window-line nil))
          (t
           (cond ((eq cycle-window-line-last-op 'middle)
                  (setq cycle-window-line-last-op 'bottom)
                  (move-to-window-line -1))
                 ((eq cycle-window-line-last-op 'bottom)
                  (setq cycle-window-line-last-op 'top)
                  (move-to-window-line 0))))))

       ;;; Scroll one line at a time. 
       (defun scroll-n-lines-ahead (&optional n)
         "Scroll ahead N lines (1 by default)."
         (interactive "P")
         (let ((save-scroll-preserve scroll-preserve-screen-position))
           (setq scroll-preserve-screen-position nil)
           (scroll-up (prefix-numeric-value n))
           (setq scroll-preserve-screen-position save-scroll-preserve)))

       (defun scroll-n-lines-behind (&optional n)
         "Scroll behind N lines (1 by default)."
         (interactive "P")
         (let ((save-scroll-preserve scroll-preserve-screen-position))  
           (setq scroll-preserve-screen-position nil)
           (scroll-down (prefix-numeric-value n))
           (setq scroll-preserve-screen-position save-scroll-preserve)))

       (global-set-key "\M-r" 'cycle-window-line)
       (global-set-key (kbd "C-*") 'scroll-n-lines-ahead)
       (global-set-key (kbd "C-/") 'scroll-n-lines-behind)
     #+end_src
    
*** Marking etc.

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-c u") 'org-mark-ring-goto)
       (global-set-key (kbd "C-<insert>") 'kill-ring-save)
       (global-set-key (kbd "C-<return>") 'cua-rectangle-mark-mode)
       (define-key org-mode-map (kbd "C-<return>") 'cua-rectangle-mark-mode)
     #+end_src
    
*** Buffers and windows

***** Misc

        #+begin_src emacs-lisp
          (global-set-key (kbd "C-x C-b") 'buffer-menu)

          ;;; Maximize frame
          (defun maximize-current-frame () 
            (set-frame-parameter nil 'fullscreen 'maximized))

          ;;; Set background of hl-line
          (set-face-background hl-line-face "gray20")
        #+end_src

***** Buffers, windows, frames

          #+begin_src emacs-lisp
            (defun prev-window ()
              (interactive)
              (other-window -1))

            (global-set-key (kbd "<s-tab>") 'other-window)
            (global-set-key (kbd "<S-s-iso-lefttab>") 'prev-window)

            (require 'windmove)

            (defun hydra-move-splitter-left (arg)
              "Move window splitter left."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'right))
                  (shrink-window-horizontally arg)
                (enlarge-window-horizontally arg)))

            (defun hydra-move-splitter-right (arg)
              "Move window splitter right."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'right))
                  (enlarge-window-horizontally arg)
                (shrink-window-horizontally arg)))

            (defun hydra-move-splitter-up (arg)
              "Move window splitter up."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'up))
                  (enlarge-window arg)
                (shrink-window arg)))

            (defun hydra-move-splitter-down (arg)
              "Move window splitter down."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'up))
                  (shrink-window arg)
                (enlarge-window arg)))

            ;; Regexes for names of buffers that should not be killed by this function
            (setq not-to-kill-buffer-list
                  '("\\*scratch\\*"
                    "#emacs"
                    "\\*Messages\\*"
                    "\\*shell\\*"
                    "\\*xonsh\\*"
                    "Sunrise Tree$"
                    "Sunrise Tree<2>$"
                    " (Sunrise)$"
                    "\\*Org Src"))

            (defun kill-or-bury-current-buffer ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill."
              (interactive)
              (let ((case-fold-search nil))
                (if (seq-some
                     (lambda (x) (string-match-p x (buffer-name (current-buffer))))
                     not-to-kill-buffer-list)
                    (bury-buffer)
                  (kill-buffer (current-buffer)))))

            (defun kill-buffer-special-and-window ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, if not sole window, delete current window."
              (interactive)
              (kill-or-bury-current-buffer)
              (unless (one-window-p)
                (delete-window)))

            (defun kill-buffer-special-and-frame ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, delete current frame."
              (interactive)
              (kill-or-bury-current-buffer)
              (delete-frame))

            (defun kill-other-buffer-special ()
              "If other buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill."
              (interactive)
              (unless (one-window-p)
                (save-excursion
                  (other-window 1)
                  (kill-or-bury-current-buffer))))

            (defun kill-other-buffer-special-and-window ()
              "If other buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, delete window it occupied."
              (interactive)
              (unless (one-window-p)
                (save-excursion
                  (other-window 1)
                  (kill-or-bury-current-buffer)
                  (delete-window))))

            (require 'buffer-move)

            (setq hydra-window--title
              (with-faicon "clone" "Buffers, windows, frames" 1 -0.05))

            (pretty-hydra-define hydra-windows
              (:quit-key "q" :title hydra-window--title :foreign-keys warn)
                ("Go"
                 (("i" windmove-up "↑ ")
                  ("m" windmove-down "↓ ")
                  ("j" windmove-left "← ")
                  ("l" windmove-right "→ "))

                 "Resize"
                 (("I" hydra-move-splitter-up "↑ ")
                  ("M" hydra-move-splitter-down "↓ ")
                  ("J" hydra-move-splitter-left "← ")
                  ("L" hydra-move-splitter-right "→ ")
                  ("=" balance-windows "= "))

                 "Swap"
                 (("M-i" buf-move-up "↑ ")
                  ("M-m" buf-move-down "↓ ")
                  ("M-j" buf-move-left "← ")
                  ("M-l" buf-move-right "→ "))

                 "Kill"
                 (("k" kill-or-bury-current-buffer "this buffer " :exit t)
                  ("K" kill-buffer-special-and-window "this buffer & window " :exit t)
                  ("M-k" kill-buffer-special-and-frame "this buffer & frame " :exit t)
                  ("o" kill-other-buffer-special "other buffer " :exit t)
                  ("O" kill-other-buffer-special-and-window "other buffer & window " :exit t))

                 "Create"
                 (("w" (progn (split-window-below) (windmove-down)) "window ↑ " :exit t)
                  ("s" (split-window-below) "window ↓ " :exit t)
                  ("a" (progn (split-window-right) (windmove-right)) "window ← " :exit t)
                  ("d" (split-window-right) "window → " :exit t)
                  ("f" make-frame-command "frame " :exit t))

                 "Delete"
                 (("0" delete-window "this window " :exit t)
                  ("1" delete-other-windows "other windows " :exit t)
                  ("5" delete-frame "this frame " :exit t))

                 "Quit"
                 (("q" nil "quit "))))

            (global-set-key (kbd "s-l") 'hydra-windows/body)
            (global-set-key (kbd "s-k") 'kill-or-bury-current-buffer)
          #+end_src
    
*** Misc

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x C-y") 'transpose-sentences)
       (global-set-key (kbd "C-z") 'undo)
     #+end_src
    
*** xah-fly keys (disabled)

     #+begin_src emacs-lisp
       ;; (setq xah-fly-use-meta-key nil)
       ;; (setq xah-fly-use-control-key nil)
       ;; (require 'xah-fly-keys)
       ;; (xah-fly-keys-set-layout "qwerty-abnt")
       ;; (xah-fly-keys 1)
     #+end_src

* Development environment

*** Flycheck (global)

    #+begin_src emacs-lisp
      (add-hook 'after-init-hook #'global-flycheck-mode)
    #+end_src

*** web-beautify

***** TODO Set up options and key bindings
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 13:46]
        :END:

        + See https://github.com/yasuyk/web-beautify

          #+begin_src emacs-lisp
            (require 'web-beautify)
          #+end_src

*** Rainbow delimiters

     #+begin_src emacs-lisp
       (require 'rainbow-delimiters)
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     #+end_src
    
*** Line numbers

     #+begin_src emacs-lisp
       (global-display-line-numbers-mode t)

       ;; Disable line numbers for some modes
       (dolist (mode '(org-mode-hook
                       term-mode-hook
                       shell-mode-hook
                       help-mode-hook
                       pdf-view-mode-hook
                       treemacs-mode-hook))
         (add-hook mode (lambda () (display-line-numbers-mode 0))))
     #+end_src

***** TODO Disable line numbers in some buffers
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 14:37]
        :END:

        + Helpful buffers

        + ???
    
*** javascript
    
***** js2-mode

        #+begin_src emacs-lisp
          (require 'js2-mode)
          (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
          (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
        #+end_src
      
***** skewer

        + Drive browser from emacs using js

          #+begin_src emacs-lisp
            (require 'skewer-mode)
          #+end_src

*** json
    
***** json-mode

      #+begin_src emacs-lisp
        (add-hook 'json-mode-hook #'flycheck-mode)
      #+end_src

*** python

     #+begin_src emacs-lisp
       (add-to-list 'interpreter-mode-alist
                    '("python3" . python-mode))

       (require 'pyvenv)

       ;; Set correct Python interpreter
       (setq pyvenv-post-activate-hooks
             (list (lambda ()
                     (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))

       (setq pyvenv-post-deactivate-hooks
             (list (lambda ()
                     (setq python-shell-interpreter "python3"))))

       (require 'flycheck-pyflakes)
       (add-hook 'python-mode-hook 'flycheck-mode)
       ;; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
       ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
     #+end_src
    
*** zeal

     #+begin_src emacs-lisp
       (require 'zeal-at-point)
       (global-set-key (kbd "s-h") 'zeal-at-point)
     #+end_src
    
*** Code folding

***** Origami

      #+begin_src emacs-lisp
        ;; (require 'origami)

        (add-hook 'prog-mode-hook 'origami-mode)

        (setq hydra-origami--title
              (with-faicon "map" "Origami" 1 -0.05))

        (pretty-hydra-define hydra-origami
          (:quit-key "q" :title hydra-origami--title :foreign-keys warn)
            ("Open"
             (("N" origami-open-node "node ")
              ("R" origami-open-node-recursively "node recursively ")
              ("P" origami-show-node "node and parents ")
              ("A" origami-open-all-nodes "all nodes "))

             "Close"
             (("n" origami-close-node "node ")
              ("r" origami-close-node-recursively "node recursively ")
              ("o" origami-show-only-node "others ")
              ("a" origami-close-all-nodes "all nodes "))

             "Toggle"
             (("SPC" origami-toggle-node "node ")
              ("C-SPC" origami-toggle-all-nodes "all ")
              ("C-<right>" origami-forward-toggle-node "→ "))

             "Move to nodes"
             (("<up>" origami-previous-fold "↑ ")
              ("<down>" origami-forward-fold "↓ ")
              ("<right>" origami-forward-fold-same-level "→ same level ")
              ("<left>" origami-backward-fold-same-level "← same level "))

             "Move in buffer"
             (("C-l" recenter-top-bottom "recenter")
              ("<prior>" scroll-down-command "PgUP")
              ("<next>" scroll-up-command "PgDn")
              ("<home>" beginning-of-buffer "bob ")
              ("<end>" end-of-buffer "eob "))

             "Misc"
             (("z" origami-undo "undo ")
              ("y" origami-redo "redo ")
              ("0" origami-reset "reset "))

             "Quit"
             (("q" nil "quit "))))

        (global-set-key (kbd "s-o") 'hydra-origami/body)
      #+end_src

*** lsp

     #+begin_src emacs-lisp
       (require 'lsp)

       ;; Modes for which to enable lsp
       (dolist (mode '(html-mode-hook
                       c-mode-hook
                       c++-mode-hook
                       css-mode-hook
                       js-mode-hook
                       ;; sh-mode-hook
                       java-mode-hook
                       python-mode-hook
                       sgml-mode-hook
                       yaml-mode-hook))
         (add-hook mode #'lsp))

       (define-key lsp-mode-map (kbd "<tab>") 'company-indent-or-complete-common)
       (define-key lsp-mode-map (kbd "<s-kp-add>") lsp-command-map)
       (setq lsp-keymap-prefix "<s-kp-add>")

       (defun efs/lsp-mode-setup ()
         (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
         (lsp-headerline-breadcrumb-mode))

       (add-hook 'lsp-mode-hook 'efs/lsp-mode-setup)

       (lsp-enable-which-key-integration 1)

       (require 'lsp-ui)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode)
       (setq lsp-ui-doc-position 'bottom)

       (require 'lsp-treemacs)
       (lsp-treemacs-sync-mode 1)

       (require 'helm-lsp)
       ; C-M-.
       (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)

       (require 'lsp-origami)
       (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable)
     #+end_src

*** projectile

     #+begin_src emacs-lisp
       (require 'projectile)

       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "<s-kp-enter>") 'projectile-command-map)

       (setq projectile-completion-system 'helm)
       (setq projectile-project-search-path '("~/Development/00-Present"))

       (require 'helm-projectile)
       (helm-projectile-on)
     #+end_src
    
*** R and ESS (disabled)

    #+begin_src emacs-lisp
      ;; (setq markdown-asymmetric-header t)
      ;; (setq markdown-enable-math t)
     
      ;; (require 'polymode)
      ;; (require 'poly-markdown)
      ;; (require 'poly-R)
     
      ;; ;; associate the new polymode to Rmd files:
      ;; (add-to-list 'auto-mode-alist
      ;;              '("\\.[rR]md\\'" . poly-gfm+r-mode))
     
      ;; ;; uses braces around code block language strings:
      ;; (setq markdown-code-block-braces t)
    #+end_src

* Document languages

*** markdown

     #+begin_src emacs-lisp
       (require 'markdown-mode)
       (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
       (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))

       (require 'markdown-toc)
     #+end_src

*** yaml

     #+begin_src emacs-lisp
       (require 'yaml-mode)
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (add-hook 'yaml-mode-hook
                 '(lambda ()
                    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
     #+end_src
    
* Completion

*** Use hippie expansion

     #+begin_src emacs-lisp
       (global-set-key [remap dabbrev-expand] 'hippie-expand)
     #+end_src

*** company

     + Configure for emacs lisp, ielm and [[*lsp][lsp]]:

       #+begin_src emacs-lisp
         (require 'company)

         ;; elisp
         (add-hook 'ielm-mode-hook 'company-mode)
         (add-hook 'emacs-lisp-mode-hook 'company-mode)
         (add-hook 'lsp-mode-hook 'company-mode)

         (global-set-key (kbd "<s-return>") 'company-complete)
         (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
         (define-key company-active-map (kbd "<ESC>") 'company-abort)

         (setq company-minimum-prefix-length 3)
         (setq company-idle-delay 0.5)
       #+end_src

     + I tried to use company-box to beautify completion popups,
       but it did not work. Popups did not even show:

       #+begin_src emacs-lisp
         ;;; This apparently keeps company popups from showing
         ;; (require 'company-box)
         ;; (add-hook 'company-mode-hook 'company-box-mode)
       #+end_src
      
    
    
*** yasnippet

     #+begin_src emacs-lisp
       (require 'yasnippet)
       (yas-global-mode 1)
       ;;; Turn off yasnippet for xonsh terminal
       (add-hook 'term-mode-hook (lambda()
                       (yas-minor-mode -1)))

       ;;; https://orgmode.org/manual/Conflicts.html#Conflicts
       (defun yas/org-very-safe-expand ()
         (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

       (add-hook 'org-mode-hook
                 (lambda ()
                   (make-variable-buffer-local 'yas/trigger-key)
                   (setq yas/trigger-key [tab])
                   (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                   (define-key yas/keymap [tab] 'yas/next-field)))
     #+end_src
    

*** helm

    + We have already configured some helm stuff in [[id:3a6ade3c-860d-435a-8b39-d68a25f2b5c7]].

     #+begin_src emacs-lisp
       (require 'helm-config)

       ;; From http://tuhdo.github.io/helm-intro.html
       ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
       ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
       ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
       ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)
       (global-unset-key (kbd "C-x c"))
       (global-set-key (kbd "C-x b") 'helm-mini)

       (when (executable-find "curl")
         (setq helm-google-suggest-use-curl-p t))

       (setq helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
             helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
             helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
             helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
             helm-ff-file-name-history-use-recentf t)

       (helm-mode 1)
       (define-key helm-map (kbd "C-SPC") 'helm-execute-persistent-action) ; 
       (define-key helm-map (kbd "<tab>")  'helm-select-action) ; list actions

       (define-key helm-map (kbd "C-<left>")  'helm-previous-source) 
       (define-key helm-map (kbd "C-<right>")  'helm-next-source) 
       (define-key helm-map (kbd "<left>")  'backward-char) 
       (define-key helm-map (kbd "<right>")  'forward-char) 

       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (global-set-key (kbd "C-c b") 'helm-buffers-list)
       (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
       (global-set-key (kbd "C-c h o") 'helm-occur)
       (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

       ;;; Make helm use new frame instead of minibuffer
       (setq helm-display-function 'helm-display-buffer-in-own-frame
             helm-display-buffer-reuse-frame nil
             helm-use-undecorated-frame-option t)

       (helm-autoresize-mode t)
     #+end_src
    
*** bash

     #+begin_src emacs-lisp
       (require 'bash-completion)
       (bash-completion-setup)
     #+end_src
    
* Shells

*** shell-mode

     #+begin_src emacs-lisp
       ;;; Fix junk characters in shell mode
       (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
       (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)

       ;;; Force save comint-input-ring upon killing emacs
       (add-hook 'kill-emacs-hook 'comint-write-input-ring)
     #+end_src

*** xonsh (disabled)

     #+begin_src emacs-lisp
       ;; (require 'xonsh-mode)
      
       ;; ;;; Bind yank
       ;; (eval-after-load "term"
       ;;   '(progn 
       ;;      (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
       ;;      (define-key term-raw-map (kbd "C-y") 'term-paste)))
     #+end_src
           
* LaTeX

*** Help

     #+begin_src emacs-lisp
       (load "ltx-help")

       ;;; Corrected version. See http://www.emacswiki.org/emacs/AUCTeX#toc8
       (defun latex-help-get-cmd-alist ()
         "Scoop up the commands in the index of the latex info manual.
                 The values are saved in `latex-help-cmd-alist' for speed."
         ;; mm, does it contain any cached entries
         (if (not (assoc "\\begin" latex-help-cmd-alist))
             (save-window-excursion
               (setq latex-help-cmd-alist nil)
               (Info-goto-node (concat latex-help-file "Command Index"))
               (end-of-buffer)
               (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
                 (setq key (ltxh-buffer-substring (match-beginning 1) (match-end 1)))
                 (setq value (ltxh-buffer-substring (match-beginning 2) (match-end 2)))
                 (setq latex-help-cmd-alist
                       (cons (cons key value) latex-help-cmd-alist))))
           )
         latex-help-cmd-alist
         ) 

       ;;; LaTeX help
       (define-key help-map "\C-l" 'latex-help)
     #+end_src

*** AucTeX

     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       (add-hook 'LaTeX-mode-hook 
                 (function (lambda ()
                             (define-key LaTeX-mode-map "\C-ci" 'latex-help))))
       (setq reftex-plug-into-AUCTeX t)
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq-default TeX-master nil)

       ;; (require 'auto-complete-auctex)
     #+end_src
    
* Kupfer integration

  #+begin_src emacs-lisp
    ;; Invoke Kupfer with name of current buffer:
    (defun buffer-file-to-kupfer () 
      "Opens the current file in Kupfer" 
      (interactive) 
      (cond ((and buffer-file-name (file-exists-p buffer-file-name)) 
             (call-process-shell-command (concat "kupfer " buffer-file-name))) 
            ;; dired handling 
            ((eq major-mode 'dired-mode) 
             (dired-do-shell-command "kupfer * " 
                                     current-prefix-arg 
                                     (dired-get-marked-files t current-prefix-arg)))
            ;; buffer-menu mode 
            ((and (eq major-mode 'Buffer-menu-mode) 
                  (file-exists-p (buffer-file-name (Buffer-menu-buffer nil)))) 
             (call-process-shell-command 
              (concat "kupfer \"" (buffer-file-name (Buffer-menu-buffer nil)) "\""))) 
            (t 
             (error "Not visiting a file or file doesn't exist")))) 

    ;; Invoke kupfer with region as text:
    (defun region-to-kupfer (start end) 
      "Opens the contents of the region in Kupfer as text." 
      (interactive "r")

      (setq text (buffer-substring start end))
      (call-process-shell-command (concat "echo '" text "' | kupfer")))

    ;; Invoke kupfer with current line as text:
    (defun line-to-kupfer () 
      "Opens the contents of the current line in Kupfer as text,
    with leading and trailing spaces removed." 

      (interactive) 

      (save-excursion
        (beginning-of-line)
        (if (setq first-non-blank-pos 
                  (re-search-forward "^[[:space:]]*" 
                                     (line-end-position) t))
            (setq beg first-non-blank-pos)
          (setq beg (line-beginning-position)))
        (end-of-line)

        ;; There must be a nonspace character for there to be trailing
        ;; spaces!
        (if (setq next-to-last-non-blank-pos 
                  (re-search-backward "[^[:space:]][[:space:]]*$" 
                                      (line-beginning-position) t))
            (setq end (+ next-to-last-non-blank-pos 1))
          (setq end (line-end-position))))

      (setq text (buffer-substring beg end))
      (call-process-shell-command (concat "echo '" text "' | kupfer")))

    ;; Sending stuff to Kupfer
    (global-set-key "\C-cl" 'line-to-kupfer) 
    (global-set-key "\C-cw" 'region-to-kupfer) 
    (global-set-key "\C-cq" 'buffer-file-to-kupfer)
  #+end_src

  
* PDF tools

  #+begin_src emacs-lisp
    ;;; Require
    (require 'pdf-tools)
    (require 'pdf-occur)
    (require 'pdf-history)
    (require 'pdf-links)
    (require 'pdf-outline)
    (require 'pdf-annot)
    (require 'pdf-sync)

    (pdf-tools-install)
  #+end_src

* File browsers

*** dired-x

     #+begin_src emacs-lisp
       (require 'dired-x)
       (setq-default dired-omit-files-p t) ; Buffer-local variable
       (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))

       (add-hook 'dired-load-hook
                 (lambda ()
                   (load "dired-x")
                   ;; Set dired-x global variables here.  For example:
                   ;; (setq dired-guess-shell-gnutar "gtar")
                   ;; (setq dired-x-hands-off-my-keys nil)
                   ))

       ;; Make M-up go to parent directory in dired mode
       (add-hook 'dired-mode-hook
                 '(lambda ()
                    (define-key dired-mode-map [(meta up)] 'dired-up-directory)))
     #+end_src
    
*** sunrise

     #+begin_src emacs-lisp
       (require 'sunrise)
       (require 'sunrise-modeline)
       (require 'sunrise-checkpoint)
       (require 'sunrise-popviewer)
       (require 'sunrise-tree)

       (add-to-list 'auto-mode-alist '("\\.srvm\\'" . sunrise-virtual-mode))

       (setq sunrise-cursor-follows-mouse nil)
       (define-key sunrise-mode-map [mouse-1]        nil)
       (define-key sunrise-mode-map [mouse-movement] nil)

       (define-key sunrise-mode-map [backtab] 'sunrise-change-window)

       (defun sunrise-reset-panes ()
             "Hard-reset SC panes."
             (interactive)
             (when sunrise-running (sunrise-setup-windows)))

       ;;; Modified to refrain from opening a new frame when browsing a (pdf,
       ;;; html etc.) file
       (defun sunrise-browse-file (&optional file)
         "Display the selected file in the default web browser."
         (interactive)
         (unless (featurep 'browse-url)
           (error "ERROR: Feature browse-url not available!"))
         (setq file (or file (dired-get-filename)))
         (sunrise-save-selected-window
          ;; I don't want a viewer window or frame to open!
          ;; (sunrise-select-viewer-window)
          (let ((buff (current-buffer)))
            (browse-url (concat "file://" file))
            (unless (eq buff (current-buffer))
              (sunrise-scrollable-viewer (current-buffer)))))
         (message "Browsing \"%s\" in web browser" file))

       ;;; Modified to set `dired-directory' buffer-local variable
       ;;; and thus prevent an error from ocurring in dired
       (defun sunrise-tree-list (dir)
         "Return the list of subdirectories in DIR."
         (setq dired-directory dir)
         (let ((entries (directory-files dir 'full)) dirs entry rel-entry)
           (while entries
             (setq entry (car entries)
                   rel-entry (file-relative-name entry (concat entry "/.."))
                   entries (cdr entries))

             (cond ((eq ?. (string-to-char (substring entry -1)))
                    (ignore))

                   ((and dired-omit-mode (eq ?. (string-to-char rel-entry)))
                    (ignore))

                   ((file-directory-p entry)
                    (setq dirs (cons entry dirs)))

                   ((and (not sunrise-tree-omit-archives) (sunrise-avfs-directory-p entry))
                    (setq dirs (cons (sunrise-tree-avfs-dir entry) dirs)))

                   (t (ignore))))
           (nreverse dirs)))

       (defun open-dir-in-sunrise ()
         (interactive)
         (save-excursion
           (sunrise-dired (ffap-guess-file-name-at-point))))

       (global-set-key (kbd "C-x C-j") 'open-dir-in-sunrise)
     #+end_src
    
* telega

  #+begin_src emacs-lisp
    (require 'telega)
    (require 'ol-telega)

    (require 'telega-url-shorten)
    (global-telega-url-shorten-mode 1)

    ;;; (require 'telega-dired-dwim) 
    (require 'telega-mnz)
    (add-hook 'telega-load-hook 'global-telega-mnz-mode)
    (setq telega-mnz-use-language-detection 30)

    (add-hook 'telega-load-hook 'telega-notifications-mode)

    (add-hook 'telega-load-hook 'telega-mode-line-mode)

    (add-hook 'telega-chat-mode-hook
              (lambda ()
                (telega-mnz-mode 1)
                (setq line-spacing 0.0)
                (setq telega-chat-input-markups '("markdown2" nil "org" "html"))))

    (add-hook 'telega-root-mode-hook
              (lambda ()
                (setq line-spacing 0.0)
                (telega-root-auto-fill-mode 1)))

    ;; company setup
    (setq telega-emoji-company-backend 'telega-company-emoji)

    (defun my-telega-chat-mode ()
      (set (make-local-variable 'company-backends)
           (append (list telega-emoji-company-backend
                         'telega-company-username
                         'telega-company-hashtag)
                   (when (telega-chat-bot-p telega-chatbuf--chat)
                     '(telega-company-botcmd))))
      (company-mode 1))

    (add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)

    ;; Copied from telega-dired-dwim and changed to detect chat buffers in
    ;; all frames
    (defun telega-dwim-chatbuf ()
      (get-window-with-predicate
       (lambda (window)
         (with-current-buffer (window-buffer window)
           (eq major-mode 'telega-chat-mode)))
       nil t))

    ;; Attach files that are marked in sunrise
    (defun sunrise-telega-copy ()
      (interactive)
      (when-let*
          ((files (seq-filter #'file-regular-p (sunrise-get-marked-files)))
           (chatbuf (telega-dwim-chatbuf)))
        (select-window chatbuf)
        (mapc #'telega-chatbuf-attach-file files)))

    (define-key sunrise-mode-map (kbd "a") 'sunrise-telega-copy)

    (setq telega-chat--display-buffer-action '((display-buffer-reuse-window display-buffer-pop-up-window)))
    (setq telega-chat-button-width 30) ; Size of contacts column on root buffer.
    (setq telega-dired-dwim-target t)
    (setq telega-chat-input-markups '("markdown2" nil "org" "html"))
    (setq telega-msg-edit-markup-spec '(telega--fmt-text-markdown2 . "markdown2"))
    (setq telega-open-file-function 'org-open-file)

    (define-key global-map (kbd "s-t") telega-prefix-map)
  #+end_src

* Misc

*** figlet

     #+begin_src emacs-lisp
       ;;; figlet definitions for Emacs.  (C) Martin Giese
       ;;;
       ;;; Use this to separate sections in TeX files, Program source, etc.
       ;;;
       ;;; customize the figlet-font-dir variable below to point to your
       ;;; figlet font directory.
       ;;;
       ;;; M-x figlet      to get a figlet comment in standard font.
       ;;; C-u M-x figlet  to be asked for the font first.
       ;;; M-x banner      for an old-fashioned banner font.
       ;;;
       ;;; These functions use comment-region to wrap the figlet output 
       ;;; in comments.
       ;;;

       (defconst figlet-font-dir "/usr/share/figlet")
       (defconst figlet-font-file-regexp "\\.flf$")
       (defconst figlet-match-font-name-regexp "^\\([^.]*\\)\\.flf$")

       (defun figlet-font-name-for-file (filename)
         (string-match figlet-match-font-name-regexp filename)
         (match-string 1 filename))

       (defun figlet-font-names ()
         (mapcar 'figlet-font-name-for-file
             (directory-files figlet-font-dir nil figlet-font-file-regexp)))

       (defun read-figlet-font (prompt)
         (let* ((figlet-fonts (figlet-font-names))
            (font-alist (mapcar (lambda (x) (list x)) figlet-fonts)))
           (completing-read prompt font-alist)))

       (defun call-figlet (font string)
         (push-mark)
         (call-process "figlet" nil (current-buffer) nil
               "-f" (if (null font) "standard" font)
               string
               )
         (exchange-point-and-mark))

       (defun figlet-block-comment-region ()
         (comment-region (region-beginning) (region-end)
                 (if (member major-mode 
                         '(emacs-lisp-mode
                       lisp-mode
                       scheme-mode))
                     3			; 3 semicolons for lisp
                   nil)
                 ))

       (defun figlet (s &optional font)
         (interactive 
          (if current-prefix-arg
              (let 
              ((font (read-figlet-font "Font: "))
               (text (read-string "FIGlet Text: ")))
            (list text font))
            (list (read-string "FIGlet Text: ") nil)))
         (save-excursion
           (call-figlet font s)
           (figlet-block-comment-region)
           ))

       (defun banner (s) 
         (interactive "sBanner Text: ")
         (figlet s "banner"))
     #+end_src

*** system-packages

***** TODO Check and learn this
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 15:04]
        :END:

        #+begin_src emacs-lisp
          (require 'system-packages)
          (setq system-packages-use-sudo t)
        #+end_src

      
* Create frames and visit files

  #+begin_src emacs-lisp
    ;;; Open custom agenda (see variable org-agenda-custom-commands). This
    ;;; splits window vertically, which is ugly. We'll fix this below.
    ;;; Update: I have changed variable org-agenda-window-setup so that
    ;;; the agenda opens in the current window, with no splitting.
    (org-agenda nil "i")
    ;(split-window-horizontally)
    ;(find-file "~/Documents/OrgFiles/todo.org")
    (maximize-current-frame)

    ;;; Second frame: shell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (make-frame)
    (other-frame -1)
    (maximize-current-frame)

    ;;; disabled
    ;; (ansi-term "/home/fnaufel/.local/bin/xonsh" "xonsh")

    ;;; Bash shell (splits window automatically)
    (shell)
    (sleep-for 3)
    (comint-send-string (get-buffer-process (shell)) "cd /home/fnaufel/\n")
    (sleep-for 1)
    (dirs)
    (delete-other-windows)

    ;;; Third frame: sunrise ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (make-frame)
    (other-frame -1)
    (maximize-current-frame)
    (sunrise "/home/fnaufel" "/home/fnaufel/Downloads")
    ;; Set tree view for left-hand pane...
    ;; (sunrise-tree-view)
    ;; ...and for right-hand pane
    ;; (other-window 1)
    ;; (sunrise-tree-view)
    ;; go back to left-hand pane
    ;; (other-window 1)

    ;;; Fourth frame: telega ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (make-frame)
    (other-frame -1)
    (maximize-current-frame)
    (telega)
    (sleep-for 3)
    (telega-root-buffer-auto-fill)

    ;; ;;; Go back to initial frame
    (other-frame -1)
  #+end_src

