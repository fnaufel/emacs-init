; -*- mode: Org; eval: (add-hook 'after-save-hook (lambda () (my/tangle-async)) nil t) -*-
#+title: fnaufel emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ~/Stow/emacs/.emacs.d/init.el

* Warn about modifying file

  #+begin_src emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;
    ;;;                      ATTENTION
    ;;;
    ;;; This file was automatically generated by org-babel-tangle
    ;;; from file /home/fnaufel/Stow/emacs/dot-emacs.org.
    ;;;
    ;;; DO NOT MODIFY THIS FILE.
    ;;;
    ;;; To change these configs, edit
    ;;; /home/fnaufel/Stow/emacs/dot-emacs.org instead.
    ;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  #+end_src

* Profile emacs init

*** See https://github.com/daviwil/emacs-from-scratch

     #+begin_src emacs-lisp
       ;; The default is 800 kilobytes.  Measured in bytes.
       (setq gc-cons-threshold (* 100 1000 1000))

       ;; Profile emacs startup
       (add-hook 'emacs-startup-hook
                 (lambda ()
                   (message "*** Emacs loaded in %s with %d garbage collections."
                            (emacs-init-time)
                            gcs-done)))
     #+end_src

* Tangle this init file

  + The comment on the first line of this file sets a local
    after-save-hook to call these functions.

    #+begin_src emacs-lisp
      (defun my/tangle-async ()
          "Tangle asynchronously current file."
          (let ((file (buffer-file-name)))
            (async-start
             `(lambda ()
                (require 'org)
                (org-babel-tangle-file ,file))
             `(lambda (result)
                (message (format "tangle-async finished for: %s" result))))))   
    #+end_src

* Save customize customizations in separate file

  #+begin_src emacs-lisp
    (setq custom-file "~/Stow/emacs/.emacs.d/.emacs-custom.el")
    (load custom-file)
  #+end_src

* Start server

  #+begin_src emacs-lisp
    (server-start)
  #+end_src

* Initialize package system and load path

  #+begin_src emacs-lisp
    (require 'package)

    (setq package-archives
          '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
            ("MELPA Stable" . "https://stable.melpa.org/packages/")
            ("MELPA"        . "https://melpa.org/packages/"))
          package-archive-priorities
          '(("MELPA Stable" . 0)
            ("GNU ELPA"     . 5)
            ("MELPA"        . 10)))

    (package-initialize)

    (add-to-list 'load-path "/home/fnaufel/.emacs.d/lisp/")

    ;; (package-refresh-contents)

    (require 'paradox)
    (paradox-enable)
  #+end_src
  
* Icons

  #+begin_src emacs-lisp
    (require 'all-the-icons)
  #+end_src

* hydra and friends

    #+begin_src emacs-lisp
      (require 'hydra)
      (require 'major-mode-hydra)
      (require 'pretty-hydra)

      (defun with-faicon (icon str &optional height v-adjust)
        (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

      (defun with-fileicon (icon str &optional height v-adjust)
        (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

      (defun with-octicon (icon str &optional height v-adjust)
        (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

      (defun with-material (icon str &optional height v-adjust)
        (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

      (defun with-mode-icon (mode str &optional height nospace face)
        (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) 0.0 0.05))
               (args     `(:height ,(or height 1) :v-adjust ,v-adjust))
               (_         (when face
                            (lax-plist-put args :face face)))
               (icon     (apply #'all-the-icons-icon-for-mode mode args))
               (icon     (if (symbolp icon)
                             (apply #'all-the-icons-octicon "file-text" args)
                           icon)))
          (s-concat icon (if nospace "" " ") str)))
    #+end_src

* Org mode

*** org-autolist

     #+begin_src emacs-lisp
       (require 'org-autolist)
       (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
     #+end_src
    
*** org-modern

    + See customizations in [[/home/fnaufel/Stow/emacs/.emacs.d/.emacs-custom.el]]

    #+begin_src emacs-lisp
      (require 'org-modern)

      (global-org-modern-mode)
    #+end_src

*** org-superstar

    + See customizations in [[/home/fnaufel/Stow/emacs/.emacs.d/.emacs-custom.el]]
   
     #+begin_src emacs-lisp
       ;; org-superstar
       (require 'org-superstar)
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

       ;; set basic title font
       (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default :foreground "dark orange")

       ;; ;; Low levels are unimportant => no scaling
       (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
       (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.05) 
       (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.1) 
       (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.15) 
     #+end_src
    
*** calfw and calfw-org

      #+begin_src emacs-lisp
         (require 'calfw)
         (require 'calfw-org)

         (global-set-key (kbd "s-c") 'cfw:open-org-calendar)

         ;; use org agenda buffer style keybinding.
         (setq cfw:org-overwrite-default-keybinding t) 
      #+end_src
    
*** Key bindings

***** General

        #+begin_src emacs-lisp
          (add-hook 'org-load-hook
                    (lambda ()
                      (define-key org-mode-map (kbd "C-c C-x i") 'org-insert-columns-dblock)
                      (define-key org-mode-map (kbd "C-<return>") nil)
                      (define-key org-mode-map (kbd "C-M-<return>") 'org-insert-heading-respect-content)))

          ;;; Shorter key bindings for next and previous link
          (define-key org-mode-map (kbd "C-n") 'org-next-link)
          (define-key org-mode-map (kbd "C-p") 'org-previous-link)

          (require 'org-id)
          (define-key org-mode-map (kbd "C-c C-k") 'org-store-link)
          (define-key org-mode-map (kbd "C-c k") 'org-store-link)
          (global-set-key (kbd "C-c C-k") 'org-store-link)
          (global-set-key (kbd "C-c k") 'org-store-link)
          
          (global-set-key "\C-ca" 'org-agenda)
        #+end_src
    
***** helm integration

        #+begin_src emacs-lisp
          ;;; helm-org
          (define-key org-mode-map (kbd "C-c j") 'helm-org-in-buffer-headings)
          (define-key org-mode-map (kbd "C-c C-j") 'helm-org-in-buffer-headings)
          (define-key org-mode-map (kbd "C-c i") 'helm-org-parent-headings)
          (define-key org-mode-map (kbd "C-c g") 'helm-org-agenda-files-headings)
        #+end_src
    
*** Org File Apps

    #+begin_src emacs-lisp
      (setq org-file-apps
            '((auto-mode . emacs)
              ("\\.mm\\'" . default)
              ("\\.x?html?\\'" . default)
              ("\\(?:xhtml\\|html\\)\\'" . default)
              ("\\.pdf::[[:digit:]]+\\'" . find-file-other-frame)
              ("\\.pdf\\'" . find-file-other-frame)
              ("\\.\\(?:flac\\|mp3\\|m4a\\)\\(?:::\\([[:digit:]]+\\)\\)?\\'" .
               (funcall audio-link-function file (match-string 1 link)))
              ("\\.\\(?:avi\\|flv\\|wmv\\|mp4\\|ra\\)\\(?:::\\([[:digit:]]+\\)\\(?:-\\([[:digit:]]+\\)\\)?\\)?\\'" .
               (funcall video-link-function file (match-string 1 link) (match-string 2 link)))
              ("\\(?:mobi\\|epub\\|azw\\)" . "ebook-viewer %s")
              ("\\.Rproj\\'" . "rstudio %s")
              ("\\.png\\'" . "gwenview %s")
              ("\\.jpe?g\\'" . "gwenview %s")
              ("\\.gif\\'" . "gwenview %s")))
    #+end_src

*** Audio and video links
    
***** TODO Change from gmplayer to vlc?
      :LOGBOOK:
      - State "TODO"       from              [2022-07-22 Fri 18:48]
      :END:

       #+begin_src emacs-lisp
         (defun convert-hhmmss-to-secs (time)
           "Receives a string of digits TIME of the form h...hhmmss and
           returns the corresponding total number of seconds. If TIME is
           nil, or the empty string, return nil." 
  
           (unless (or (null time)(string= time ""))
             (let ((secs (string-to-int time))   ; if only secs, this is enough
                   (mins 0)
                   (hrs 0)
                   (l (length time)))
               (when (> l 2)                     ; there are minutes!
                 (progn 
                   (setq secs (string-to-int (substring time -2)))     ; must correct secs
                   (setq mins (string-to-int (substring time 0 -2))))) ; if no hours, enough
               (when (> l 4)                     ; there are hours!
                 (progn 
                   (setq mins (string-to-int (substring time -4 -2))) ; must correct minutes
                   (setq hrs (string-to-int (substring time 0 -4))))) ; get hours
               (+ secs (* 60 mins) (* 3600 hrs)))))

         (defvar video-link-function 'gmplayer-seek 
           "*Function used in org mode to open video links.")

         (defun gmplayer-seek (file &optional time1 time2)
           "Start asynchronous instance of gnome-mplayer to play FILE,
           optionally starting from time TIME1 and ending at time TIME2.
           Both time arguments are of the form h...hhmmss (with no
           separators). If fewer than 6 digits are present, those present
           are the least significant; e.g., 123 = 1 minute and 23 seconds."
  
           (let ((t1 (convert-hhmmss-to-secs time1))
                 (t2 (convert-hhmmss-to-secs time2))) 
             (cond ((and t1 t2)                ; recall t2 is end time
                    (setq t2 (- t2 t1))        ; make t2 duration of playback
                    (message "Opening %s  (from %s to %s)" file time1 time2)
                    (start-process "org-gmplayer"                     ; process name
                                   (concat file "::" time1 "-" time2) ; buffer name
                                   "/usr/bin/gnome-mplayer"           ; program
                                   "--ss"                             ; args
                                   (int-to-string t1)
                                   "--endpos" 
                                   (int-to-string t2)
                                   "-v"
                                   file))
                   (t1 
                    (message "Opening %s  (from %s)" file time1)
                    (start-process "org-gmplayer" 
                                   (concat file "::" time1) 
                                   "/usr/bin/gnome-mplayer"
                                   "--ss" 
                                   (int-to-string t1)
                                   "-v"
                                   file))
                   (t 
                    (message "Opening %s" file)
                    (start-process "org-gmplayer" 
                                   file 
                                   "/usr/bin/gnome-mplayer"
                                   "-v"
                                   file)))))
                    
         (defvar audio-link-function 'audacious-seek 
           "*Function used in org mode to open audio links.")

         (defun audacious-seek (file &optional time1)
           "Start asynchronous instance of audacious to play FILE,
           optionally starting from time TIME1. The TIME1 argument is of
           the form h...hhmmss (with no separators). If fewer than 6
           digits are present, those present are the least significant;
           e.g., 123 = 1 minute and 23 seconds."
  
           (let ((t1 (convert-hhmmss-to-secs time1)))
             (cond (t1 
                    (message "Opening %s  (from %s)" file time1)
                    (start-process "org-audacious" 
                                   (concat file "::" time1) 
                                   "/usr/bin/audacious"
                                   file)
                    (sleep-for 0 500)
                    (start-process "org-audtool" 
                                   (concat file "::" time1) 
                                   "/usr/bin/audtool"
                                   "playback-seek"
                                   (int-to-string t1)))
                   (t 
                    (message "Opening %s" file)
                    (start-process "org-audacious" 
                                   file 
                                   "/usr/bin/audacious"
                                   file)))))
       #+end_src
    
*** org-journal (disabled)

     #+begin_src emacs-lisp
       ;; (require 'org-journal)

       ;; (global-unset-key (kbd "C-c C-j"))
       ;; (global-set-key (kbd "C-c s") 'org-journal-search)
       ;; (global-set-key (kbd "C-J") 'org-journal-new-entry)
       ;; (define-key org-mode-map (kbd "C-J") 'org-journal-new-entry)
     #+end_src
    
*** Export subtree as html fragment to clipboard
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2021-12-16 Thu 14:30]
    - State "STARTED"    from              [2021-12-15 Wed 18:31]
    :END:

    #+begin_src emacs-lisp
      (defun subtree-html-export-to-clipboard ()
        "Export current subtree to html fragment and put in clipboard."
        (interactive)

        (let ((only-window (one-window-p)))
          (org-html-export-as-html nil t t t)
          (kill-ring-save (point-min) (point-max))
          (kill-buffer (current-buffer))
          (message "Subtree copied as HTML to clipboard.")
          (if only-window
              (delete-window)
            (other-window -1))))

      (define-key org-mode-map (kbd "<f9>") 'subtree-html-export-to-clipboard)
    #+end_src

*** Export to json

    + From https://github.com/mattduck/org-toggl-py/blob/master/org-export-json.el

      #+begin_src emacs-lisp
        ;; Provides function to export current org buffer as JSON structure
        ;; to $file.org.json. Adapted from an org-mode mailing post by
        ;; Brett Viren: https://lists.gnu.org/archive/html/emacs-orgmode/2014-01/msg00338.html
        (require 'json)

        (defun org-export-json ()
          (interactive)
          (let* ((tree (org-element-parse-buffer 'object nil)))
            (org-element-map tree (append org-element-all-elements
                                          org-element-all-objects '(plain-text))
              (lambda (x)
                (if (org-element-property :parent x)
                    (org-element-put-property x :parent "none"))
                (if (org-element-property :structure x)
                    (org-element-put-property x :structure "none"))
                ))
            (write-region
             (json-encode tree)
             nil (concat (buffer-file-name) ".json"))))

        (defun cli-org-export-json ()
          (let ((org-file-path (car command-line-args-left))
                (other-load-files (cdr command-line-args-left)))
            (mapc 'load-file other-load-files)
            (find-file org-file-path)
            (org-mode)
            (message "Exporting to JSON: %s" (car command-line-args-left))
            (org-export-json)))
      #+end_src

*** Parsing

    #+begin_src emacs-lisp
      (require 'orgba)
    #+end_src

*** Bibliographies
    :PROPERTIES:
    :ID:       3a6ade3c-860d-435a-8b39-d68a25f2b5c7
    :END:

***** ebib, biblio

      #+begin_src emacs-lisp
        ;; Based on  https://ogbe.net/emacs/references.html

        (require 'ebib)
        (require 'bibtex)
        ;; (require 'helm-bibtex)

        ;; Show cursor
        (setq ebib-hide-cursor nil)

        ;; Bib file
        (setq ebib-preload-bib-files '("/home/fnaufel/Documents/OrgFiles/bibliography.bib"))

        ;; Dir for pdfs and files
        (setq ebib-file-search-dirs '("/home/BooksAndArticles/ebib-files"))

        ;; Dir for notes files
        (setq ebib-notes-directory "/home/fnaufel/Documents/OrgFiles/ebib-notes")

        ;; Use biblatex instead of BibTeX
        (setq ebib-bibtex-dialect 'biblatex)

        ;; Use timestamps
        (setq ebib-use-timestamp t)

        ;; Handle ebib links in org
        (require 'org-ebib)

        ;; Store filename in link
        (setq org-ebib-link-type 'key+filepath)

        ;; Use biblio
        (require 'biblio)
        (require 'ebib-biblio)
        (define-key biblio-selection-mode-map (kbd "e") #'ebib-biblio-selection-import)

        ;; Programs to open files
        (setq ebib-file-associations
              '(("pdf" . find-file-other-frame)))

        ;; Use full paths in file field
        (setq ebib-truncate-file-names nil)

        ;; Function to insert path to pdf file to be inserted in notes file as a property
        (defun ebib-create-org-noter-file-property (key db)
          "Create a property :NOTER_DOCUMENT: for org-noter to find the pdf file.
        The file is taken from the \"file\" filed in the entry designated
        by KEY in the current database.  If that field contains more than
        one file name, the user is asked to select one.  If
        the \"file\" field is empty, return the empty string."
          (let ((files (ebib-get-field-value "file" key db 'noerror 'unbraced 'xref)))
            (if files
                (let* ((absolute-path (ebib--expand-file-name (ebib--select-file files nil key)))
                       (relative-path (file-relative-name absolute-path default-directory))
                       (abbreviate-path (abbreviate-file-name absolute-path))
                       (final-path
                        (cl-case ebib-link-file-path-type
                          (relative relative-path)
                          (adaptive (if (string-match (concat "^" (regexp-quote default-directory))
                                                      absolute-path)
                                        relative-path
                                      abbreviate-path))
                          (otherwise absolute-path))))
                  (format "%s" final-path))
              "")))

        ;; Add specifier
        (setq ebib-notes-template-specifiers
              '((75 . ebib-create-org-identifier)
               (84 . ebib-create-org-description)
               (88 . ebib-create-org-title)
               (67 . ebib-create-org-cite)
               (76 . ebib-create-org-link)
               (70 . ebib-create-org-file-link)
               (68 . ebib-create-org-doi-link)
               (85 . ebib-create-org-url-link)
               (102 . ebib-create-org-noter-file-property)))

        ;; Add :NOTER_DOCUMENT: property to note template
        (setq ebib-notes-template "* %T\n:PROPERTIES:\n%K\n:NOTER_DOCUMENT: %f\n:END:\n%%?\n")

        (defvar do.refs/pdf-download-dir "/home/fnaufel/Downloads/"
          "The path to the temporary directory to which we download PDF
          files.")

        ;; another convenience function to add the most recently downloaded PDF file
        ;; from the ~/Downloads folder to the current entry
        (defun do.refs/ebib-add-newest-from-downloads (&optional file-extension)
          "Add the most recent file from `do.refs/pdf-download-dir' to the ebib entry at point."
          (interactive)
          ;; pull out the most recent file from ~/Downloads with the .pdf extension.
          (let ((newest-file (let ((dir-files (directory-files-and-attributes do.refs/pdf-download-dir)))
                               (caar (sort
                                      (if (not file-extension)
                                          ;; the newest file from the download directory
                                          (mapcan (lambda (x)
                                                    (let ((file-name (concat (file-name-as-directory do.refs/pdf-download-dir) (car x))))
                                                      (when (file-regular-p file-name) (cons x nil))))
                                                  dir-files)
                                        ;; all files with a certain extension
                                        (mapcan (lambda (x) (when (string-equal (file-name-extension (nth 0 x)) file-extension) (cons x nil)))
                                                dir-files))
                                      ;; sort by date
                                      (lambda (x y) (not (time-less-p (nth 6 x) (nth 6 y)))))))))
            (if newest-file
                ;; https://nullprogram.com/blog/2017/10/27/
                ;; need to override `read-file-name' because ebib normally prompts us for the file to import
                (let ((fpath (concat (file-name-as-directory do.refs/pdf-download-dir) newest-file))
                      (bibkey (ebib--get-key-at-point)))
                  (cl-letf (((symbol-function 'read-file-name) (lambda (&rest _) fpath)))
                    (let ((current-prefix-arg '(4))) ;; C-u (to keep from removing original file)
                      (call-interactively #'ebib-import-file)))
                  (message "[Ebib] Imported %s for %s" fpath bibkey))
              (message "[Ebib] No files from %s imported." do.refs/pdf-download-dir))))

        ;; Call biblio-lookup with author and/or title of current entry in kill ring
        (defun lookup-entry ()
          "Put author and title of current entry in kill ring and call biblio-lookup."
          (interactive)
          (let* ((key (ebib--get-key-at-point))
                 (author (ebib-get-field-value
                          "author" key ebib--cur-db 'noerror 'unbraced))
                 (title (ebib-get-field-value
                         "title" key ebib--cur-db 'noerror 'unbraced))
                 (query (concat author " " title)))
            (kill-new query)
            (biblio-lookup nil nil)))

        ;; Bibliography hydra
        (setq hydra-bib--title
              (with-faicon "book" "Bibliography" 1 -0.05))

        (pretty-hydra-define hydra-bib
          (:quit-key "q" :title hydra-bib--title :foreign-keys warn :exit t)
          (""
           (("e" (ebib) "[E]bib " :exit t)
            ("b" (lookup-entry) "[B]iblio (yank for current entry) " :exit t)
            ("c" (ebib-insert-citation) "[C]ite current entry " :exit t)
            ("f" (ebib-import-file) "[F]ile for current entry " :exit t)
            ("u" (ebib-download-url nil) "[U]rl download for current entry " :exit t)
            ("o" (org-noter) "[O]pen pdf from note " :exit t)
            ("n" (do.refs/ebib-add-newest-from-downloads) "[N]ewest file for current entry " :exit t))

           ""
           (("q" nil "quit "))))

        (global-set-key (kbd "s-z") 'hydra-bib/body)
      #+end_src

***** Zotero, helm-bibtex, etc. (disabled)

      #+begin_src emacs-lisp
        ;; (require 'helm-bibtex)
        ;; (require 'bibtex)
        ;; (require 'org-zotxt-noter)

        ;; (setq
        ;;  ;; If bibtex-completion-pdf-field is non-nil, bibtex-completion will
        ;;  ;; first try to retrieve the file specified in this field. If the
        ;;  ;; field is not set for an entry or if the specified file does not
        ;;  ;; exists, bibtex-completion falls back to the method described above
        ;;  ;; (searching for key + .pdf in the directories listed in
        ;;  ;; bibtex-completion-library-path).
        ;;  bibtex-completion-pdf-field "file"
        ;;  bibtex-completion-bibliography '("/home/fnaufel/Documents/OrgFiles/bibliography.bib")
        ;;  bibtex-completion-library-path '("/home/BooksAndArticles/")
        ;;  bibtex-completion-notes-path "/home/fnaufel/Documents/OrgFiles/bibnotes.org"
        ;;  bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
        ;;  bibtex-completion-additional-search-fields '(keywords)
        ;;  bibtex-completion-display-formats
        ;;  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
        ;;    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
        ;;    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        ;;    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        ;;    (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
        ;;  bibtex-completion-pdf-open-function 'find-file-other-frame)

        ;; (setq bibtex-autokey-year-length 4
        ;;       bibtex-autokey-name-year-separator "-"
        ;;       bibtex-autokey-year-title-separator "-"
        ;;       bibtex-autokey-titleword-separator "-"
        ;;       bibtex-autokey-titlewords 2
        ;;       bibtex-autokey-titlewords-stretch 1
        ;;       bibtex-autokey-titleword-length 5)

        ;; (require 'helm-config)

        ;; ;;; Add action to open pdf in Okular
        ;; (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)

        ;;   (let ((bibtex-completion-pdf-open-function
        ;;          (lambda (fpath) (start-process "okular" "*helm-bibtex-okular*" "/usr/bin/okular" fpath))))
        ;;     (bibtex-completion-open-pdf keys fallback-action)))

        ;; (helm-bibtex-helmify-action bibtex-completion-open-pdf-external helm-bibtex-open-pdf-external)

        ;; (helm-add-action-to-source
        ;;  "Open file in Okular"
        ;;  'helm-bibtex-open-pdf-external
        ;;  helm-source-bibtex
        ;;  1)

        ;; ;;; Key bindings
        ;; (global-set-key (kbd "s-b") 'helm-command-prefix)

        ;; (define-key helm-command-map "b" 'helm-bibtex)
        ;; (define-key helm-command-map "B" 'helm-bibtex-with-local-bibliography)
        ;; (define-key helm-command-map "n" 'helm-bibtex-with-notes)
        ;; (define-key helm-command-map (kbd "s-b") 'helm-resume)
      #+end_src
    
***** Zotero hydra (disabled)

       #+begin_src emacs-lisp
         ;; (setq hydra-zot--title
         ;;       (with-faicon "book" "Zotero" 1 -0.05))

         ;; (pretty-hydra-define hydra-zot
         ;;   (:quit-key "q" :title hydra-zot--title :foreign-keys warn :exit t)
         ;;   (""
         ;;    (("i" (org-zotxt-insert-reference-link) "Insert link ")
         ;;     ("u" (org-zotxt-update-reference-link-at-point) "Update link ")
         ;;     ("a" (org-zotxt-open-attachment) "Open attachment "))

         ;;    "Quit"
         ;;    (("q" nil "quit "))))

         ;; (global-set-key (kbd "s-z") 'hydra-zot/body)
       #+end_src

*** Misc (incl. hooks)

     #+begin_src emacs-lisp
       ;; Turn on Auto Fill mode automatically in Org mode
       (add-hook 'org-mode-hook
                 '(lambda ()
                    (turn-on-auto-fill)))

       ;; Auto numbering of headlines
       (add-hook 'org-mode-hook (lambda () (org-num-mode)))

       ;; org-zotxt (disabled)
       ;; (add-hook 'org-mode-hook (lambda () (org-zotxt-mode)))

       ;; Org Tempo reimplements completions of structure template before
       ;; point like `org-try-structure-completion' in Org v9.1 and earlier.
       ;; For example, strings like "<e" at the beginning of the line will be
       ;; expanded to an example block.
       ;;
       ;; All blocks defined in `org-structure-template-alist' are added as
       ;; Org Tempo shortcuts, in addition to keywords defined in
       ;; `org-tempo-keywords-alist'.
       ;;
       ;; `tempo' can also be used to define more sophisticated keywords
       ;; completions.  See the section "Additional keywords" below for
       ;; additional details.
       (require 'org-tempo)

       ;;; Associate .org files to org mode
       (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

       ;;; Associate claws-mail compose files to org mode
       (add-to-list 'auto-mode-alist '("\\.0x.*$" . org-mode))

       ;;; Clock
       (setq org-clock-persist t)
       (org-clock-persistence-insinuate)

       (defun update-clock-tables ()
         "Visit todo.org, update all dynamic blocks there, and save."

         (find-file "/home/fnaufel/Documents/OrgFiles/todo.org")
         (org-show-all '(headings))
         (org-update-all-dblocks)
         (save-buffer))

       ;;; cdlatex mode (disabled)
       ;;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

       ;;; Images
       (setq org-startup-with-inline-images t)
       (setq org-image-actual-width 600)
    #+end_src

* IPython and jupyter

  #+begin_src emacs-lisp
    (defun ipython-qtconsole ()
      (interactive)
      (async-shell-command
       (concat
        "/ssd/miniconda/envs/r-reticulate/bin/jupyter qtconsole "
        "--ConsoleWidget.font_family=\"JetBrains Mono\" --ConsoleWidget.font_size=14 "
        "--JupyterWidget.editor=\"emacscli\" --paging=hsplit "
        "--gui-completion=droplist --style=monokai"
       )
       "jupyter-qt-output"))

    (defun ipython-notebook-int ()
      (interactive)
      (let ((df (read-file-name "Notebook dir or file: ")))
        (ipython-notebook df)))

    (defun ipython-notebook (df)
      (interactive)
      (async-shell-command 
       (concat "/ssd/miniconda/envs/r-reticulate/bin/jupyter notebook "
               "--notebook-dir=" df)
       "jupyter-notebook-output"))
  #+end_src
  
* UI

*** Super key + number generates digit arguments

     #+begin_src emacs-lisp
       (global-set-key (kbd "s--") 'negative-argument)
       (global-set-key (kbd "s-0") 'digit-argument)
       (global-set-key (kbd "s-1") 'digit-argument)
       (global-set-key (kbd "s-2") 'digit-argument)
       (global-set-key (kbd "s-3") 'digit-argument)
       (global-set-key (kbd "s-4") 'digit-argument)
       (global-set-key (kbd "s-5") 'digit-argument)
       (global-set-key (kbd "s-6") 'digit-argument)
       (global-set-key (kbd "s-7") 'digit-argument)
       (global-set-key (kbd "s-8") 'digit-argument)
       (global-set-key (kbd "s-9") 'digit-argument)
     #+end_src

     #+RESULTS:
     : digit-argument

*** Menubar

     #+begin_src emacs-lisp
       (menu-bar-mode 0)
     #+end_src

*** Frame font

     #+begin_src emacs-lisp
       ;;; Set font
       (defun fontify-frame (frame)
         (set-frame-parameter frame 'font "Cousine-13")
         (set-frame-parameter frame 'background-color "black")
         (set-frame-parameter frame 'foreground-color "bisque"))

       ;;; Fontify current frame
       (fontify-frame nil)

       ;;; Fontify any future frames
       (push 'fontify-frame after-make-frame-functions)

       ;;; These are set in Customize
       ;;; (add-to-list 'default-frame-alist '(foreground-color . "bisque"))
       ;;; (add-to-list 'default-frame-alist '(background-color . "black"))
     #+end_src
    
*** Icons

     #+begin_src emacs-lisp
       (require 'all-the-icons)
     #+end_src

*** which-key

     + When a prefix key is typed, show possible next keys.

       #+begin_src emacs-lisp
         (require 'which-key)
         (which-key-mode)
       #+end_src

*** anzu

     + Show number of matches during isearch.

       #+begin_src emacs-lisp
         (require 'anzu)
         (global-anzu-mode +1)
       #+end_src

*** helpful

     #+begin_src emacs-lisp
       (require 'helpful) 

       ;; Note that the built-in `describe-function' includes both functions
       ;; and macros. `helpful-function' is functions only, so we provide
       ;; `helpful-callable' as a drop-in replacement.
       (global-set-key (kbd "C-h f") #'helpful-callable)
       (global-set-key (kbd "C-h v") #'helpful-variable)
       (global-set-key (kbd "C-h k") #'helpful-key)

       ;; Lookup the current symbol at point. C-c C-d is a common keybinding
       ;; for this in lisp modes.
       (global-set-key (kbd "C-c C-d") #'helpful-at-point)

       ;; Look up *F*unctions (excludes macros).
       ;;
       ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
       ;; already links to the manual, if a function is referenced there.
       (global-set-key (kbd "C-h F") #'helpful-function)

       ;; Look up *C*ommands.
       ;;
       ;; By default, C-h C is bound to describe `describe-coding-system'. I
       ;; don't find this very useful, but it's frequently useful to only
       ;; look at interactive functions.
       (global-set-key (kbd "C-h C") #'helpful-command)
     #+end_src

*** info-colors

     #+begin_src emacs-lisp
       (require 'info-colors)
       (add-hook 'Info-selection-hook 'info-colors-fontify-node)
     #+end_src

*** expand-region

     #+begin_src emacs-lisp
       (require 'expand-region)
       (global-set-key (kbd "C-+") 'er/expand-region)
     #+end_src
    
*** smart-parens

     #+begin_src emacs-lisp
       (require 'smartparens-config)
       (smartparens-global-mode 1)
       (show-smartparens-global-mode t)

       ;;; markdown-mode etc
       (sp-with-modes '(markdown-mode gfm-mode rst-mode org-mode)
         (sp-local-pair "*" "*")
         (sp-local-pair "/" "/")
       ;  (sp-local-pair "_" "_")
       )

       (defun sp-select-up ()
         (interactive)

         (sp-backward-up-sexp)
         (sp-select-next-thing)
       )

       (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)
       (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)

       (define-key smartparens-mode-map (kbd "C-S-p") 'sp-previous-sexp)
       (define-key smartparens-mode-map (kbd "C-S-n") 'sp-next-sexp)

       (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
       (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)

       (define-key smartparens-mode-map (kbd "C-S-a") 'sp-beginning-of-sexp)
       (define-key smartparens-mode-map (kbd "C-S-e") 'sp-end-of-sexp)

       (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

       (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
       (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

       (define-key smartparens-mode-map (kbd "C-]") 'sp-select-up)
       (define-key smartparens-mode-map (kbd "C-}") 'sp-select-next-thing)
     #+end_src
    
*** multiple-cursors

     #+begin_src emacs-lisp
       (require 'multiple-cursors)

       ;; When you have an active region that spans multiple lines, the
       ;; following will add a cursor to each line:
       (global-set-key (kbd "C-|") 'mc/edit-lines)

       ;; When you want to add multiple cursors not based on continuous
       ;; lines, but based on keywords in the buffer, use the keys below.
       ;; First mark the word, then add more cursors.
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-?") 'mc/mark-all-like-this-dwim)
       (global-set-key (kbd "C-.") 'mc/mark-sgml-tag-pair)

       ;; To get out of multiple-cursors-mode, press `<return>` or `C-g`. The
       ;; latter will first disable multiple regions before disabling
       ;; multiple cursors.

       ;; If you want to insert a newline in multiple-cursors-mode, use
       ;; `C-j`.
     #+end_src
    
*** sml-modeline

     #+begin_src emacs-lisp
       (if (require 'sml-modeline nil 'noerror)    ;; use sml-modeline if available
         (progn 
           (sml-modeline-mode 1)                   ;; show buffer pos in the mode line
           (scroll-bar-mode -1))                   ;; turn off the scrollbar
         (scroll-bar-mode 1)                       ;; otherwise, show a scrollbar...
         (set-scroll-bar-mode 'right))             ;; ... on the right
     #+end_src
    
*** Recent files

     #+begin_src emacs-lisp
       ;; Enable recent files menu
       (recentf-mode)

       ;; ffap-bindings binds C-x C-r to ffap-read-only.
       ;; I prefer to have it bound to recentf-open-files.
       (global-set-key "\C-x\C-r" 'recentf-open-files)
     #+end_src
    
*** Copy or duplicate line

     #+begin_src emacs-lisp
       ;;; Copy line at point
       (defun copy-line ()
         "Copy line at point."
         (interactive)
         (save-excursion
           (setq text (thing-at-point 'line t))
           (kill-new text)
           (princ "Line copied to kill ring." t)))

       (global-set-key (kbd "C-s-<up>") 'copy-line)

       ;;; Duplicate line
       (defun duplicate-line ()
         "Duplicate line at point on a new line below. Point remains in original line."
         (interactive)
         (save-excursion
           (setq text (thing-at-point 'line t))
           (when (string-suffix-p "\n" text)
             (setq text (substring text 0 -1)))
           (move-end-of-line nil)
           (insert (concat "\n" text))))
 
       (global-set-key (kbd "C-s-<down>") 'duplicate-line)
     #+end_src
    
*** Generate numbered lines

     #+begin_src emacs-lisp
       ;;; Generate numbered items (one per line) according to template 
       (defun gen-numbered-items (first last template)
         "Generate numbered items (one per line) according to template."

         (interactive "*nFirst number: \nnLast number: \nMTemplate: ")
  
         (setq i first)
         (while (not (> i last))
           (progn
             (insert (format template i) "\n")
             (setq i (1+ i)))))
     #+end_src
    
*** Jump hydra

     #+begin_src emacs-lisp
              (setq hydra-fnjump--title
                    (with-faicon "map-signs" "Important places" 1 -0.05))

              (pretty-hydra-define hydra-fnjump
                (:quit-key "q" :title hydra-fnjump--title :foreign-keys warn :exit t)

                ("Files"
                 (("e" (find-file "~/Documents/OrgFiles/mail.org") "email ")
                  ("b" (find-file "~/.bashrc") ".bashrc ")
                  ("p" (find-file "~/.profile") ".profile ")
                  ("s" (find-file "~/Stow") "Stow ")
                  ("c" (find-file "~/Stow/emacs/.emacs.d/.emacs-custom.el") "custom.el ")
                  ("i" (find-file "~/Stow/emacs/dot-init.org") "init "))

                 "Python"
                 (("j" (ipython-notebook-int) "jupyter")
                  ("y" (ipython-qtconsole) "ipython")
                  ;; ("x" (ansi-term "/home/fnaufel/.local/bin/xonsh" "xonsh") "new xonsh "))
                  ("x" (message "xonsh disabled for now") "new xonsh "))

                 "Clock"
                 (("t" (update-clock-tables) "clock tables "))

                 "Quit"
                 (("q" nil "quit ")
                  ("<SPC>" nil "quit "))))

              (global-set-key (kbd "s-j") 'hydra-fnjump/body)
     #+end_src
    
*** Browse kill ring

     #+begin_src emacs-lisp
       (defadvice yank-pop (around kill-ring-browse-maybe (arg))
         "If last action was not a yank, run `browse-kill-ring' instead."
         (if (not (eq last-command 'yank))
             (browse-kill-ring)
           ad-do-it))

       (ad-activate 'yank-pop)
     #+end_src
    
*** auto-fill

     #+begin_src emacs-lisp
       ;; Turn on Auto Fill mode automatically in Text mode and related modes
       (add-hook 'text-mode-hook
                 '(lambda () (turn-on-auto-fill)))
     #+end_src
    
*** Non-ASCII keys

     #+begin_src emacs-lisp
       (require 'iso-transl)

       ;;; Insert nobreakspace
       (defun insert-nbsp ()
         "Insert nobreakspace (code 160)"
         (interactive)
         (insert 160)
       )

       (global-set-key (kbd "C-;") 'insert-nbsp)
     #+end_src
    
*** Movement

     #+begin_src emacs-lisp
       ;;; Position point at window center, top, bottom
       (defvar cycle-window-line-last-op 'middle
         "Indicates the last cycle-window-line operation performed.
       Possible values: `top', `middle', `bottom'.")

       (defun cycle-window-line (&optional arg)
         "Move point to window center, bottom, and top, successively.

       A prefix argument is handled like `move-to-window-line':
        With numeric prefix ARG, move point to window-line ARG."

         (interactive "P")
         (cond
          (arg (move-to-window-line arg))                 ; Always respect ARG.
          ((or (not (eq this-command last-command))
           (eq cycle-window-line-last-op 'top))
           (setq cycle-window-line-last-op 'middle)
           (move-to-window-line nil))
          (t
           (cond ((eq cycle-window-line-last-op 'middle)
                  (setq cycle-window-line-last-op 'bottom)
                  (move-to-window-line -1))
                 ((eq cycle-window-line-last-op 'bottom)
                  (setq cycle-window-line-last-op 'top)
                  (move-to-window-line 0))))))

       ;;; Scroll one line at a time. 
       (defun scroll-n-lines-ahead (&optional n)
         "Scroll ahead N lines (1 by default)."
         (interactive "P")
         (let ((save-scroll-preserve scroll-preserve-screen-position))
           (setq scroll-preserve-screen-position nil)
           (scroll-up (prefix-numeric-value n))
           (setq scroll-preserve-screen-position save-scroll-preserve)))

       (defun scroll-n-lines-behind (&optional n)
         "Scroll behind N lines (1 by default)."
         (interactive "P")
         (let ((save-scroll-preserve scroll-preserve-screen-position))  
           (setq scroll-preserve-screen-position nil)
           (scroll-down (prefix-numeric-value n))
           (setq scroll-preserve-screen-position save-scroll-preserve)))

       (global-set-key "\M-r" 'cycle-window-line)
       (global-set-key (kbd "C-*") 'scroll-n-lines-ahead)
       (global-set-key (kbd "C-/") 'scroll-n-lines-behind)
     #+end_src
    
*** Marking etc.

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-c u") 'org-mark-ring-goto)
       (global-set-key (kbd "C-<insert>") 'kill-ring-save)
       (global-set-key (kbd "C-<return>") 'cua-rectangle-mark-mode)
       (define-key org-mode-map (kbd "C-<return>") 'cua-rectangle-mark-mode)
     #+end_src
    
*** Buffers and windows

***** Misc

        #+begin_src emacs-lisp
          (global-set-key (kbd "C-x C-b") 'buffer-menu)

          ;;; Maximize frame
          (defun maximize-current-frame () 
            (set-frame-parameter nil 'fullscreen 'maximized))

          ;;; Set background of hl-line
          (set-face-background hl-line-face "gray20")
        #+end_src

***** Buffers, windows, frames: killing, deleting, creating

          #+begin_src emacs-lisp
            (defun prev-window ()
              (interactive)
              (other-window -1))

            (global-set-key (kbd "<s-tab>") 'other-window)
            (global-set-key (kbd "<S-s-iso-lefttab>") 'prev-window)

            (require 'windmove)

            (setq column-delta 5)
            (setq line-delta 5)

            (defun hydra-move-splitter-left (arg)
              "Move window splitter left."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'right))
                  (shrink-window-horizontally column-delta)
                (enlarge-window-horizontally column-delta)))

            (defun hydra-move-splitter-right (arg)
              "Move window splitter right."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'right))
                  (enlarge-window-horizontally column-delta)
                (shrink-window-horizontally column-delta)))

            (defun hydra-move-splitter-up (arg)
              "Move window splitter up."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'up))
                  (enlarge-window line-delta)
                (shrink-window line-delta)))

            (defun hydra-move-splitter-down (arg)
              "Move window splitter down."
              (interactive "p")
              (if (let ((windmove-wrap-around))
                    (windmove-find-other-window 'up))
                  (shrink-window line-delta)
                (enlarge-window line-delta)))

            ;; Regexes for names of buffers that should not be killed by this function
            (setq not-to-kill-buffer-list
                  '("\\*scratch\\*"
                    "#emacs"
                    "\\*Messages\\*"
                    "\\*shell\\*"
                    "\\*xonsh\\*"
                    "Sunrise Tree$"
                    "Sunrise Tree<2>$"
                    " (Sunrise)$"
                    "\\*Org Src"))

            (defun kill-or-bury-current-buffer ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill."
              (interactive)
              (let ((case-fold-search nil))
                (if (seq-some
                     (lambda (x) (string-match-p x (buffer-name (current-buffer))))
                     not-to-kill-buffer-list)
                    (bury-buffer)
                  (kill-buffer (current-buffer)))))

            (defun kill-buffer-special-and-window ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, if not sole window, delete current window."
              (interactive)
              (kill-or-bury-current-buffer)
              (unless (one-window-p)
                (delete-window)))

            (defun kill-buffer-special-and-frame ()
              "If current buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, delete current frame."
              (interactive)
              (kill-or-bury-current-buffer)
              (delete-frame))

            (defun kill-other-buffer-special ()
              "If other buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill."
              (interactive)
              (unless (one-window-p)
                (save-excursion
                  (other-window 1)
                  (kill-or-bury-current-buffer))))

            (defun kill-other-buffer-special-and-window ()
              "If other buffer name is on not-to-kill-buffer-list, bury.
            Otherwise, kill. Besides, delete window it occupied."
              (interactive)
              (unless (one-window-p)
                (save-excursion
                  (other-window 1)
                  (kill-or-bury-current-buffer)
                  (delete-window))))

            (require 'buffer-move)

            (setq hydra-window--title
              (with-faicon "clone" "Buffers, windows, frames" 1 -0.05))

            (pretty-hydra-define hydra-windows
              (:quit-key "q" :title hydra-window--title :foreign-keys warn)
                ("Go"
                 (("<up>" windmove-up "↑ ")
                  ("<down>" windmove-down "↓ ")
                  ("<left>" windmove-left "← ")
                  ("<right>" windmove-right "→ ")
                  ("w" windmove-up "↑ ")
                  ("s" windmove-down "↓ ")
                  ("a" windmove-left "← ")
                  ("d" windmove-right "→ "))

                 "Resize"
                 (("{" hydra-move-splitter-up "↑ ")
                  ("}" hydra-move-splitter-down "↓ ")
                  ("[" hydra-move-splitter-left "← ")
                  ("]" hydra-move-splitter-right "→ ")
                  ("=" balance-windows "= "))

                 "Swap"
                 (("<prior>" buf-move-up "↑ " :exit t)
                  ("<next>"  buf-move-down "↓ " :exit t)
                  ("<home>"  buf-move-left "← " :exit t)
                  ("<end>"   buf-move-right "→ " :exit t))

                 "Create"
                 (("i" (progn (split-window-below) (windmove-down)) "window ↑ " :exit t)
                  ("k" (split-window-below) "window ↓ " :exit t)
                  ("j" (progn (split-window-right) (windmove-right)) "window ← " :exit t)
                  ("l" (split-window-right) "window → " :exit t)
                  ("f" make-frame-command "frame " :exit t))

                 "Delete"
                 (("0" delete-window "this window " :exit t)
                  ("1" delete-other-windows "other windows " :exit t)
                  ("5" delete-frame "this frame " :exit t))

                 "Quit"
                 (("q" nil "quit ")
                  ("<SPC>" nil "quit "))))

            (global-set-key (kbd "s-l") 'hydra-windows/body)

            (setq hydra-kill--title
              (with-faicon "times" "Kill" 1 -0.05))

            (pretty-hydra-define hydra-kill
              (:quit-key "q" :title hydra-kill--title :foreign-keys warn)
                ("Kill"
                 (("k" kill-or-bury-current-buffer "this buffer " :exit t)
                  ("s-k" kill-or-bury-current-buffer "this buffer " :exit t)
                  ("0" kill-buffer-special-and-window "this buffer & window " :exit t)
                  ("5" kill-buffer-special-and-frame "this buffer & frame " :exit t)
                  ("o" kill-other-buffer-special "other buffer " :exit t)
                  ("1" kill-other-buffer-special-and-window "other buffer & window " :exit t))

                 "Quit"
                 (("q" nil "quit ")
                  ("<SPC>" nil "quit "))))

            (global-set-key (kbd "s-k") 'hydra-kill/body)
          #+end_src
    
*** Misc

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x C-y") 'transpose-sentences)
       (global-set-key (kbd "C-z") 'undo)
     #+end_src
    
* Development environment

*** Flycheck (global)

    #+begin_src emacs-lisp
      (add-hook 'after-init-hook #'global-flycheck-mode)
    #+end_src

*** web-beautify

***** TODO Set up options and key bindings
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 13:46]
        :END:

        + See https://github.com/yasuyk/web-beautify

          #+begin_src emacs-lisp
            (require 'web-beautify)
          #+end_src

*** Rainbow delimiters

     #+begin_src emacs-lisp
       (require 'rainbow-delimiters)
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     #+end_src
    
*** Line numbers

     #+begin_src emacs-lisp
       (global-display-line-numbers-mode t)

       ;; Disable line numbers for some modes
       (dolist (mode '(org-mode-hook
                       term-mode-hook
                       shell-mode-hook
                       help-mode-hook
                       pdf-view-mode-hook
                       mu4e-main-mode-hook
                       mu4e-headers-mode-hook
                       mu4e-compose-mode-hook
                       mu4e-org-mode-hook
                       mu4e-view-mode-hook
                       mu4e-update-mail-mode-hook
                       treemacs-mode-hook))
         (add-hook mode (lambda () (display-line-numbers-mode 0))))
     #+end_src

***** TODO Disable line numbers in some buffers
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 14:37]
        :END:

        + Helpful buffers

        + ???
    
*** javascript
    
***** js2-mode

        #+begin_src emacs-lisp
          (require 'js2-mode)
          (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
          (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
        #+end_src
      
***** skewer

        + Drive browser from emacs using js

          #+begin_src emacs-lisp
            (require 'skewer-mode)
          #+end_src

*** json
    
***** json-mode

      #+begin_src emacs-lisp
        (add-hook 'json-mode-hook #'flycheck-mode)
      #+end_src

*** python

     #+begin_src emacs-lisp
       (add-to-list 'interpreter-mode-alist
                    '("python3" . python-mode))

       (require 'pyvenv)

       ;; Set correct Python interpreter
       (setq pyvenv-post-activate-hooks
             (list (lambda ()
                     (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))

       (setq pyvenv-post-deactivate-hooks
             (list (lambda ()
                     (setq python-shell-interpreter "python3"))))

       (require 'flycheck-pyflakes)
       (add-hook 'python-mode-hook 'flycheck-mode)
       ;; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
       ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
     #+end_src
    
*** zeal

     #+begin_src emacs-lisp
       (require 'zeal-at-point)
       (global-set-key (kbd "s-h") 'zeal-at-point)
     #+end_src
    
*** Code folding

***** yafolding

      #+begin_src emacs-lisp
        (require 'yafolding)

        (global-set-key (kbd "s->") 'yafolding-show-all)
        (global-set-key (kbd "s-<") 'yafolding-hide-all)
        (global-set-key (kbd "s-.") 'yafolding-show-element)
        (global-set-key (kbd "s-,") 'yafolding-hide-element)
      #+end_src

***** Origami

      #+begin_src emacs-lisp
        ;; (require 'origami)

        (add-hook 'prog-mode-hook 'origami-mode)

        (setq hydra-origami--title
              (with-faicon "map" "Origami" 1 -0.05))

        (pretty-hydra-define hydra-origami
          (:quit-key "q" :title hydra-origami--title :foreign-keys warn)
            ("Open"
             (("N" origami-open-node "node ")
              ("R" origami-open-node-recursively "node recursively ")
              ("P" origami-show-node "node and parents ")
              ("A" origami-open-all-nodes "all nodes "))

             "Close"
             (("n" origami-close-node "node ")
              ("r" origami-close-node-recursively "node recursively ")
              ("o" origami-show-only-node "others ")
              ("a" origami-close-all-nodes "all nodes "))

             "Toggle"
             (("SPC" origami-toggle-node "node ")
              ("C-SPC" origami-toggle-all-nodes "all ")
              ("C-<right>" origami-forward-toggle-node "→ "))

             "Move to nodes"
             (("<up>" origami-previous-fold "↑ ")
              ("<down>" origami-forward-fold "↓ ")
              ("<right>" origami-forward-fold-same-level "→ same level ")
              ("<left>" origami-backward-fold-same-level "← same level "))

             "Move in buffer"
             (("C-l" recenter-top-bottom "recenter")
              ("<prior>" scroll-down-command "PgUP")
              ("<next>" scroll-up-command "PgDn")
              ("<home>" beginning-of-buffer "bob ")
              ("<end>" end-of-buffer "eob "))

             "Misc"
             (("z" origami-undo "undo ")
              ("y" origami-redo "redo ")
              ("0" origami-reset "reset "))

             "Quit"
             (("q" nil "quit "))))

        (global-set-key (kbd "s-o") 'hydra-origami/body)
      #+end_src

*** lsp

     #+begin_src emacs-lisp
       (require 'lsp)

       ;; Modes for which to enable lsp
       (dolist (mode '(html-mode-hook
                       c-mode-hook
                       c++-mode-hook
                       css-mode-hook
                       js-mode-hook
                       ;; sh-mode-hook
                       java-mode-hook
                       python-mode-hook
                       sgml-mode-hook
                       yaml-mode-hook))
         (add-hook mode #'lsp))

       (define-key lsp-mode-map (kbd "<tab>") 'company-indent-or-complete-common)
       (define-key lsp-mode-map (kbd "<s-kp-add>") lsp-command-map)
       (setq lsp-keymap-prefix "<s-kp-add>")

       (defun efs/lsp-mode-setup ()
         (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
         (lsp-headerline-breadcrumb-mode))

       (add-hook 'lsp-mode-hook 'efs/lsp-mode-setup)

       (lsp-enable-which-key-integration 1)

       (require 'lsp-ui)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode)
       (setq lsp-ui-doc-position 'bottom)

       (require 'lsp-treemacs)
       (lsp-treemacs-sync-mode 1)

       (require 'helm-lsp)
       ; C-M-.
       (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)

       (require 'lsp-origami)
       (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable)
     #+end_src

*** projectile

     #+begin_src emacs-lisp
       (require 'projectile)

       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "<s-kp-enter>") 'projectile-command-map)

       (setq projectile-completion-system 'helm)
       (setq projectile-project-search-path '("~/Development/00-Present"))

       (require 'helm-projectile)
       (helm-projectile-on)
     #+end_src
    
*** R and ESS (disabled)

    #+begin_src emacs-lisp
      ;; (setq markdown-asymmetric-header t)
      ;; (setq markdown-enable-math t)
     
      ;; (require 'polymode)
      ;; (require 'poly-markdown)
      ;; (require 'poly-R)
     
      ;; ;; associate the new polymode to Rmd files:
      ;; (add-to-list 'auto-mode-alist
      ;;              '("\\.[rR]md\\'" . poly-gfm+r-mode))
     
      ;; ;; uses braces around code block language strings:
      ;; (setq markdown-code-block-braces t)
    #+end_src

* Document languages

*** markdown

     #+begin_src emacs-lisp
       (require 'markdown-mode)
       (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
       (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))

       (require 'markdown-toc)
     #+end_src

*** yaml

     #+begin_src emacs-lisp
       (require 'yaml-mode)
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (add-hook 'yaml-mode-hook
                 '(lambda ()
                    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
     #+end_src
    
* Completion

*** Use hippie expansion

     #+begin_src emacs-lisp
       (global-set-key [remap dabbrev-expand] 'hippie-expand)
     #+end_src

*** company

     + Configure for emacs lisp, ielm and [[*lsp][lsp]]:

       #+begin_src emacs-lisp
         (require 'company)

         ;; elisp
         (add-hook 'ielm-mode-hook 'company-mode)
         (add-hook 'emacs-lisp-mode-hook 'company-mode)
         (add-hook 'lsp-mode-hook 'company-mode)

         (global-set-key (kbd "<s-return>") 'company-complete)
         (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
         (define-key company-active-map (kbd "<ESC>") 'company-abort)

         (setq company-minimum-prefix-length 3)
         (setq company-idle-delay 0.5)
       #+end_src

     + I tried to use company-box to beautify completion popups,
       but it did not work. Popups did not even show:

       #+begin_src emacs-lisp
         ;;; This apparently keeps company popups from showing
         ;; (require 'company-box)
         ;; (add-hook 'company-mode-hook 'company-box-mode)
       #+end_src
    
*** yasnippet

     #+begin_src emacs-lisp
       (require 'yasnippet)
       (yas-global-mode 1)
       ;;; Turn off yasnippet for xonsh terminal
       (add-hook 'term-mode-hook (lambda()
                       (yas-minor-mode -1)))

       ;;; https://orgmode.org/manual/Conflicts.html#Conflicts
       (defun yas/org-very-safe-expand ()
         (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

       (add-hook 'org-mode-hook
                 (lambda ()
                   (make-variable-buffer-local 'yas/trigger-key)
                   (setq yas/trigger-key [tab])
                   (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                   (define-key yas/keymap [tab] 'yas/next-field)))
     #+end_src

*** helm

     #+begin_src emacs-lisp
       (require 'helm-config)

       ;; From http://tuhdo.github.io/helm-intro.html
       ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
       ;; Changed to "C-c C-h". Note: We must set "C-c C-h" globally, because we
       ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
       (global-set-key (kbd "C-c C-h") 'helm-command-prefix)
       (global-unset-key (kbd "C-x c"))
       (global-set-key (kbd "C-x b") 'helm-mini)

       (when (executable-find "curl")
         (setq helm-google-suggest-use-curl-p t))

       (setq helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
             helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
             helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
             helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
             helm-ff-file-name-history-use-recentf t)

       (helm-mode 1)
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-j")  'helm-select-action)

       (define-key helm-map (kbd "C-<left>")  'helm-previous-source) 
       (define-key helm-map (kbd "C-<right>")  'helm-next-source) 
       (define-key helm-map (kbd "<left>")  'backward-char) 
       (define-key helm-map (kbd "<right>")  'forward-char) 

       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (global-set-key (kbd "C-c b") 'helm-buffers-list)
       (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
       (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

       ;;; Make helm use new frame instead of minibuffer
       (setq helm-display-function 'helm-display-buffer-in-own-frame
             helm-display-buffer-reuse-frame nil
             helm-use-undecorated-frame-option t)

       (helm-autoresize-mode t)
     #+end_src
    
*** bash

     #+begin_src emacs-lisp
       (require 'bash-completion)
       (bash-completion-setup)
     #+end_src
    
* Shells

*** shell-mode

     #+begin_src emacs-lisp
       ;;; Fix junk characters in shell mode
       (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
       (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)

       ;;; Force save comint-input-ring upon killing emacs
       (add-hook 'kill-emacs-hook 'comint-write-input-ring)
     #+end_src

*** xonsh (disabled)

     #+begin_src emacs-lisp
       ;; (require 'xonsh-mode)
      
       ;; ;;; Bind yank
       ;; (eval-after-load "term"
       ;;   '(progn 
       ;;      (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
       ;;      (define-key term-raw-map (kbd "C-y") 'term-paste)))
     #+end_src
           
* LaTeX

*** Help

     #+begin_src emacs-lisp
       (load "ltx-help")

       ;;; Corrected version. See http://www.emacswiki.org/emacs/AUCTeX#toc8
       (defun latex-help-get-cmd-alist ()
         "Scoop up the commands in the index of the latex info manual.
                 The values are saved in `latex-help-cmd-alist' for speed."
         ;; mm, does it contain any cached entries
         (if (not (assoc "\\begin" latex-help-cmd-alist))
             (save-window-excursion
               (setq latex-help-cmd-alist nil)
               (Info-goto-node (concat latex-help-file "Command Index"))
               (end-of-buffer)
               (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
                 (setq key (ltxh-buffer-substring (match-beginning 1) (match-end 1)))
                 (setq value (ltxh-buffer-substring (match-beginning 2) (match-end 2)))
                 (setq latex-help-cmd-alist
                       (cons (cons key value) latex-help-cmd-alist))))
           )
         latex-help-cmd-alist
         ) 

       ;;; LaTeX help
       (define-key help-map "\C-l" 'latex-help)
     #+end_src

*** AucTeX

     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       (add-hook 'LaTeX-mode-hook 
                 (function (lambda ()
                             (define-key LaTeX-mode-map "\C-ci" 'latex-help))))
       (setq reftex-plug-into-AUCTeX t)
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq-default TeX-master nil)

       ;; (require 'auto-complete-auctex)
     #+end_src
    
* Kupfer integration

  #+begin_src emacs-lisp
    ;; Invoke Kupfer with name of current buffer:
    (defun buffer-file-to-kupfer () 
      "Opens the current file in Kupfer" 
      (interactive) 
      (cond ((and buffer-file-name (file-exists-p buffer-file-name)) 
             (call-process-shell-command (concat "kupfer " buffer-file-name))) 
            ;; dired handling 
            ((eq major-mode 'dired-mode) 
             (dired-do-shell-command "kupfer * " 
                                     current-prefix-arg 
                                     (dired-get-marked-files t current-prefix-arg)))
            ;; buffer-menu mode 
            ((and (eq major-mode 'Buffer-menu-mode) 
                  (file-exists-p (buffer-file-name (Buffer-menu-buffer nil)))) 
             (call-process-shell-command 
              (concat "kupfer \"" (buffer-file-name (Buffer-menu-buffer nil)) "\""))) 
            (t 
             (error "Not visiting a file or file doesn't exist")))) 

    ;; Invoke kupfer with region as text:
    (defun region-to-kupfer (start end) 
      "Opens the contents of the region in Kupfer as text." 
      (interactive "r")

      (setq text (buffer-substring start end))
      (call-process-shell-command (concat "echo '" text "' | kupfer")))

    ;; Invoke kupfer with current line as text:
    (defun line-to-kupfer () 
      "Opens the contents of the current line in Kupfer as text,
    with leading and trailing spaces removed." 

      (interactive) 

      (save-excursion
        (beginning-of-line)
        (if (setq first-non-blank-pos 
                  (re-search-forward "^[[:space:]]*" 
                                     (line-end-position) t))
            (setq beg first-non-blank-pos)
          (setq beg (line-beginning-position)))
        (end-of-line)

        ;; There must be a nonspace character for there to be trailing
        ;; spaces!
        (if (setq next-to-last-non-blank-pos 
                  (re-search-backward "[^[:space:]][[:space:]]*$" 
                                      (line-beginning-position) t))
            (setq end (+ next-to-last-non-blank-pos 1))
          (setq end (line-end-position))))

      (setq text (buffer-substring beg end))
      (call-process-shell-command (concat "echo '" text "' | kupfer")))

    ;; Sending stuff to Kupfer
    (global-set-key "\C-cl" 'line-to-kupfer) 
    (global-set-key "\C-cw" 'region-to-kupfer) 
    (global-set-key "\C-cq" 'buffer-file-to-kupfer)
  #+end_src

  
* PDF tools

  #+begin_src emacs-lisp
    ;;; Require
    (require 'pdf-tools)
    (require 'pdf-occur)
    (require 'pdf-history)
    (require 'pdf-links)
    (require 'pdf-outline)
    (require 'pdf-annot)
    (require 'pdf-sync)

    (pdf-tools-install)
  #+end_src

* File browsers

*** dired-x

     #+begin_src emacs-lisp
       (require 'dired-x)
       (setq-default dired-omit-files-p t) ; Buffer-local variable
       (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))

       (add-hook 'dired-load-hook
                 (lambda ()
                   (load "dired-x")
                   ;; Set dired-x global variables here.  For example:
                   ;; (setq dired-guess-shell-gnutar "gtar")
                   ;; (setq dired-x-hands-off-my-keys nil)
                   ))

       ;; Make M-up go to parent directory in dired mode
       (add-hook 'dired-mode-hook
                 '(lambda ()
                    (define-key dired-mode-map [(meta up)] 'dired-up-directory)))
     #+end_src
    
*** sunrise

     #+begin_src emacs-lisp
       (require 'sunrise)
       (require 'sunrise-modeline)
       (require 'sunrise-checkpoint)
       (require 'sunrise-popviewer)
       (require 'sunrise-tree)

       (add-to-list 'auto-mode-alist '("\\.srvm\\'" . sunrise-virtual-mode))

       (setq sunrise-cursor-follows-mouse nil)
       (define-key sunrise-mode-map [mouse-1]        nil)
       (define-key sunrise-mode-map [mouse-movement] nil)

       (define-key sunrise-mode-map [backtab] 'sunrise-change-window)

       (defun sunrise-reset-panes ()
             "Hard-reset SC panes."
             (interactive)
             (when sunrise-running (sunrise-setup-windows)))

       ;;; Modified to refrain from opening a new frame when browsing a (pdf,
       ;;; html etc.) file
       (defun sunrise-browse-file (&optional file)
         "Display the selected file in the default web browser."
         (interactive)
         (unless (featurep 'browse-url)
           (error "ERROR: Feature browse-url not available!"))
         (setq file (or file (dired-get-filename)))
         (sunrise-save-selected-window
          ;; I don't want a viewer window or frame to open!
          ;; (sunrise-select-viewer-window)
          (let ((buff (current-buffer)))
            (browse-url (concat "file://" file))
            (unless (eq buff (current-buffer))
              (sunrise-scrollable-viewer (current-buffer)))))
         (message "Browsing \"%s\" in web browser" file))

       ;;; Modified to set `dired-directory' buffer-local variable
       ;;; and thus prevent an error from ocurring in dired
       (defun sunrise-tree-list (dir)
         "Return the list of subdirectories in DIR."
         (setq dired-directory dir)
         (let ((entries (directory-files dir 'full)) dirs entry rel-entry)
           (while entries
             (setq entry (car entries)
                   rel-entry (file-relative-name entry (concat entry "/.."))
                   entries (cdr entries))

             (cond ((eq ?. (string-to-char (substring entry -1)))
                    (ignore))

                   ((and dired-omit-mode (eq ?. (string-to-char rel-entry)))
                    (ignore))

                   ((file-directory-p entry)
                    (setq dirs (cons entry dirs)))

                   ((and (not sunrise-tree-omit-archives) (sunrise-avfs-directory-p entry))
                    (setq dirs (cons (sunrise-tree-avfs-dir entry) dirs)))

                   (t (ignore))))
           (nreverse dirs)))

       (defun open-dir-in-sunrise ()
         (interactive)
         (save-excursion
           (sunrise-dired (ffap-guess-file-name-at-point))))

       (global-set-key (kbd "C-x C-j") 'open-dir-in-sunrise)

       ;;; Flatten dir and subdirs
       (define-key sunrise-mode-map (kbd "C-c b") nil)
       (define-key sunrise-mode-map (kbd "f") #'sunrise-flatten-branch)
     #+end_src
    
* mu4e, offlineimap

  #+begin_src emacs-lisp
    (require 'org-mime)

    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

    (require 'mu4e)

    ;; use mu4e for e-mail in emacs
    (setq mail-user-agent 'mu4e-user-agent)

    (setq mu4e-maildir (expand-file-name "~/Maildir"))

    (setq mu4e-get-mail-command "offlineimap"
          mu4e-html2text-command "w3m -T text/html"
          mu4e-view-prefer-html nil
          mu4e-update-interval nil ; do not update automatically
          mu4e-headers-auto-update t
          mu4e-compose-signature-auto-include t
          mu4e-compose-format-flowed t)

    ;; Use unicode chars for marks?
    (setq mu4e-use-fancy-chars nil)

    ;; Actions: view
    (setq mu4e-view-actions
          '(("capture message" . mu4e-action-capture-message)
            ("labels" . mu4e-action-retag-message)
            ("show this thread" . mu4e-action-show-thread)
            ("viewInBrowser" . mu4e-action-view-in-browser)))

    ;; Actions: headers
    (setq mu4e-headers-actions
          '(("capture message" . mu4e-action-capture-message)
            ("labels" . mu4e-action-retag-message)
            ("show this thread" . mu4e-action-show-thread)
            ("viewInBrowser" . mu4e-action-view-in-browser)))

    ;; enable inline images
    (setq mu4e-view-show-images t)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; every new email composition gets its own frame!
    (setq mu4e-compose-in-new-frame t)

    ;; Don't save message to Sent Messages, IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)

    (add-hook 'mu4e-view-mode-hook #'visual-line-mode)

    ;; <tab> to navigate to links, <RET> to open them in browser
    (add-hook 'mu4e-view-mode-hook
              (lambda()
                (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
                (local-set-key (kbd "<tab>") 'org-next-link)
                (local-set-key (kbd "<backtab>") 'org-previous-link)))

    ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
    (add-hook 'mu4e-headers-mode-hook
              (defun my/mu4e-change-headers ()
                (interactive)
                (setq mu4e-headers-fields
                      `((:date . 30) 
                        (:flags . 6)
                        (:from . 22)
                        (:thread-subject . ,(- (window-body-width) 72)) ;; alternatively, use :subject
                        (:size . 7)))))

    ;; if you use date instead of human-date in the above, use this setting
    ;; give me ISO(ish) format date-time stamps in the header list
    (setq mu4e-headers-date-format "%Y-%m-%d (%a) %H:%M")

    (require 'smtpmail)

    ;;rename files when moving
    ;;NEEDED FOR MBSYNC, disabled for offlinemap
    ;;(setq mu4e-change-filenames-when-moving t)

    ;;set up queue for offline email
    ;;use mu mkdir  ~/Maildir/acc/queue to set up first
    (setq smtpmail-queue-mail nil)  ;; start in normal mode

    (setq mu4e-attachment-dir  "~/Downloads")
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-compose-dont-reply-to-self t)

    ;; disable for now
    ;; (require 'org-mu4e)

    ;; convert org mode to HTML automatically
    ;; (setq org-mu4e-convert-to-html t)

    ;;from vxlabs config
    ;; show full addresses in view message (instead of just names)
    ;; toggle per name with M-RET
    (setq mu4e-view-show-addresses 't)

    ;; don't ask when quitting
    (setq mu4e-confirm-quit nil)

    ;; bookmarks
    (setq mu4e-bookmarks `(
                           ("x:\\\\Inbox" "Inbox" ?i)
                           (,(concat "flag:unread AND "
                                     "NOT flag:trashed AND "
                                     "NOT maildir:/Spam$/ AND "
                                     "NOT maildir:/Trash$/") "Unread messages" ?u)
                           ("date:today..now" "Today's messages" ?t)
                           ("date:7d..now" "Last 7 days" ?w)
                           ("mime:image/*" "Messages with images" ?p)
                           ("flag:flagged" "Flagged messages" ?f)))

    ;; Upon refiling and trashing, remove Inbox tag
    (add-hook 'mu4e-mark-execute-pre-hook
              (lambda (mark msg)
                (when (member mark '(refile trash))
                  (mu4e-action-retag-message msg "-\\Inbox"))))

    ;; mu4e-context
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy 'always-ask)
    (setq mu4e-contexts
          (list

           (make-mu4e-context
            :name "fnaufel"
            :enter-func (lambda () (mu4e-message "Entering context fnaufel"))
            :leave-func (lambda () (mu4e-message "Leaving context fnaufel"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "fnaufel@gmail.com")))
            :vars '((user-mail-address . "fnaufel@gmail.com")
                    (user-full-name . "Fernando Náufel")
                    (mu4e-sent-folder . "/fnaufel-gmail/[Gmail].All Mail")
                    (mu4e-drafts-folder . "/fnaufel-gmail/[Gmail].Drafts")
                    (mu4e-trash-folder . "/fnaufel-gmail/[Gmail].Trash")
                    (mu4e-refile-folder . "/fnaufel-gmail/[Gmail].All Mail")
                    (mu4e-compose-signature . (concat "Fernando Náufel\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
                    (mu4e-compose-format-flowed . t)
                    (smtpmail-queue-dir . "~/Maildir/fnaufel-gmail/queue/cur")
                    (message-send-mail-function . smtpmail-send-it)
                    (smtpmail-smtp-user . "fnaufel")
                    (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                    (smtpmail-auth-credentials . (expand-file-name "~/.authinfo-fnaufel.gpg"))
                    (smtpmail-default-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-debug-info . t)
                    (smtpmail-debug-verbose . t)
                    (mu4e-maildir-shortcuts . (
                                               ("/fnaufel-gmail/[Gmail].Trash"     . ?t)
                                               ("/fnaufel-gmail/[Gmail].All Mail"  . ?a)
                                               ("/fnaufel-gmail/[Gmail].Drafts"    . ?d)))))

           (make-mu4e-context
            :name "jneuer"
            :enter-func (lambda () (mu4e-message "Entering context jneuer"))
            :leave-func (lambda () (mu4e-message "Leaving context jneuer"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "jln.neuer@gmail.com")))
            :vars '((user-mail-address . "jln.neuer@gmail.com")
                    (user-full-name . "Julian Neuer")
                    (mu4e-sent-folder . "/jneuer-gmail/[Gmail].All Mail")
                    (mu4e-drafts-folder . "/jneuer-gmail/[Gmail].Drafts")
                    (mu4e-trash-folder . "/jneuer-gmail/[Gmail].Trash")
                    (mu4e-refile-folder . "/jneuer-gmail/[Gmail].All Mail")
                    (mu4e-compose-signature . (concat "Julian Neuer\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
                    (mu4e-compose-format-flowed . t)
                    (smtpmail-queue-dir . "~/Maildir/jneuer-gmail/queue/cur")
                    (message-send-mail-function . smtpmail-send-it)
                    (smtpmail-smtp-user . "jln.neuer")
                    (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                    (smtpmail-auth-credentials . (expand-file-name "~/.authinfo-jneuer.gpg"))
                    (smtpmail-default-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-debug-info . t)
                    (smtpmail-debug-verbose . t)
                    (mu4e-maildir-shortcuts . (
                                               ("/jneuer-gmail/[Gmail].Trash"     . ?t)
                                               ("/jneuer-gmail/[Gmail].All Mail"  . ?a)
                                               ("/jneuer-gmail/[Gmail].Drafts"    . ?d)))))

           ;; (make-mu4e-context
           ;;  :name "sesquipedalian"
           ;;  :enter-func (lambda () (mu4e-message "Entering context sesquipedalian"))
           ;;  :leave-func (lambda () (mu4e-message "Leaving context sesquipedalian"))
           ;;  :match-func (lambda (msg)
           ;;                (when msg
           ;;                  (mu4e-message-contact-field-matches
           ;;                   msg '(:from :to :cc :bcc) "sesquipedalian.overtones@gmail.com")))
           ;;  :vars '((user-mail-address . "sesquipedalian.overtones@gmail.com")
           ;;          (user-full-name . "Sesquipedalian Overtones")
           ;;          (mu4e-sent-folder . "/sesquipedalian-gmail/[Gmail].All Mail")
           ;;          (mu4e-drafts-folder . "/sesquipedalian-gmail/[Gmail].Drafts")
           ;;          (mu4e-trash-folder . "/sesquipedalian-gmail/[Gmail].Trash")
           ;;          (mu4e-refile-folder . "/sesquipedalian-gmail/[Gmail].All Mail")
           ;;          (mu4e-compose-signature . (concat "Sesquipedalian Overtones\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
           ;;          (mu4e-compose-format-flowed . t)
           ;;          (smtpmail-queue-dir . "~/Maildir/sesquipedalian-gmail/queue/cur")
           ;;          (message-send-mail-function . smtpmail-send-it)
           ;;          (smtpmail-smtp-user . "sesquipedalian.overtones")
           ;;          (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
           ;;          (smtpmail-auth-credentials . (expand-file-name "~/.authinfo-sesq.gpg"))
           ;;          (smtpmail-default-smtp-server . "smtp.gmail.com")
           ;;          (smtpmail-smtp-server . "smtp.gmail.com")
           ;;          (smtpmail-smtp-service . 587)
           ;;          (smtpmail-debug-info . t)
           ;;          (smtpmail-debug-verbose . t)
           ;;          (mu4e-maildir-shortcuts . (
           ;;                                     ("/sesquipedalian-gmail/[Gmail].Trash"     . ?t)
           ;;                                     ("/sesquipedalian-gmail/[Gmail].All Mail"  . ?a)
           ;;                                     ("/sesquipedalian-gmail/[Gmail].Drafts"    . ?d)))))

           ))

  #+end_src

* telega

  Pinned to MELPA stable. See [[file:.emacs.d/.emacs-custom.el::'(package-pinned-packages (quote ((telega . "MELPA Stable"))))][.emacs-custom.el]]

  #+begin_src emacs-lisp
    (require 'telega)
    (require 'ol-telega)

    (require 'telega-url-shorten)
    (global-telega-url-shorten-mode 1)

    ;;; (require 'telega-dired-dwim) 
    (require 'telega-mnz)
    (add-hook 'telega-load-hook 'global-telega-mnz-mode)
    (setq telega-mnz-use-language-detection 30)

    (add-hook 'telega-load-hook 'telega-notifications-mode)

    (add-hook 'telega-load-hook 'telega-mode-line-mode)

    (add-hook 'telega-chat-mode-hook
              (lambda ()
                (telega-mnz-mode 1)
                (setq line-spacing 0.0)
                (setq telega-chat-input-markups '("markdown2" nil "org" "html"))))

    (add-hook 'telega-root-mode-hook
              (lambda ()
                (setq line-spacing 0.0)
                (telega-root-auto-fill-mode 1)))

    ;; company setup
    (setq telega-emoji-company-backend 'telega-company-emoji)

    (defun my-telega-chat-mode ()
      (set (make-local-variable 'company-backends)
           (append (list telega-emoji-company-backend
                         'telega-company-username
                         'telega-company-hashtag)
                   (when (telega-chat-bot-p telega-chatbuf--chat)
                     '(telega-company-botcmd))))
      (company-mode 1))

    (add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)

    ;; Copied from telega-dired-dwim and changed to detect chat buffers in
    ;; all frames
    (defun telega-dwim-chatbuf ()
      (get-window-with-predicate
       (lambda (window)
         (with-current-buffer (window-buffer window)
           (eq major-mode 'telega-chat-mode)))
       nil t))

    ;; Attach files that are marked in sunrise
    (defun sunrise-telega-copy ()
      (interactive)
      (when-let*
          ; Changed from sunrise- to dired-get-marked-files below, because
          ; sunrise- was returning the relative path, but I need the absolute path
          ((files (seq-filter #'file-regular-p (dired-get-marked-files)))
           (chatbuf (telega-dwim-chatbuf)))
        (select-window chatbuf)
        (mapc #'telega-chatbuf-attach-file files)))

    (define-key sunrise-mode-map (kbd "a") 'sunrise-telega-copy)

    (setq telega-chat--display-buffer-action '((display-buffer-reuse-window display-buffer-pop-up-window)))
    (setq telega-chat-button-width 30) ; Size of contacts column on root buffer.
    (setq telega-dired-dwim-target t)
    (setq telega-chat-input-markups '("markdown2" nil "org" "html"))
    (setq telega-msg-edit-markup-spec '(telega--fmt-text-markdown2 . "markdown2"))
    (setq telega-open-file-function 'org-open-file)

    (define-key global-map (kbd "s-t") telega-prefix-map)
  #+end_src

* Misc

*** Pretty print sexps

    #+begin_src emacs-lisp
      (require 'pp+)

      (global-set-key [remap eval-expression] 'pp-eval-expression)
      (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
    #+end_src

*** figlet

     #+begin_src emacs-lisp
       ;;; figlet definitions for Emacs.  (C) Martin Giese
       ;;;
       ;;; Use this to separate sections in TeX files, Program source, etc.
       ;;;
       ;;; customize the figlet-font-dir variable below to point to your
       ;;; figlet font directory.
       ;;;
       ;;; M-x figlet      to get a figlet comment in standard font.
       ;;; C-u M-x figlet  to be asked for the font first.
       ;;; M-x banner      for an old-fashioned banner font.
       ;;;
       ;;; These functions use comment-region to wrap the figlet output 
       ;;; in comments.
       ;;;

       (defconst figlet-font-dir "/usr/share/figlet")
       (defconst figlet-font-file-regexp "\\.flf$")
       (defconst figlet-match-font-name-regexp "^\\([^.]*\\)\\.flf$")

       (defun figlet-font-name-for-file (filename)
         (string-match figlet-match-font-name-regexp filename)
         (match-string 1 filename))

       (defun figlet-font-names ()
         (mapcar 'figlet-font-name-for-file
             (directory-files figlet-font-dir nil figlet-font-file-regexp)))

       (defun read-figlet-font (prompt)
         (let* ((figlet-fonts (figlet-font-names))
            (font-alist (mapcar (lambda (x) (list x)) figlet-fonts)))
           (completing-read prompt font-alist)))

       (defun call-figlet (font string)
         (push-mark)
         (call-process "figlet" nil (current-buffer) nil
               "-f" (if (null font) "standard" font)
               string
               )
         (exchange-point-and-mark))

       (defun figlet-block-comment-region ()
         (comment-region (region-beginning) (region-end)
                 (if (member major-mode 
                         '(emacs-lisp-mode
                       lisp-mode
                       scheme-mode))
                     3			; 3 semicolons for lisp
                   nil)
                 ))

       (defun figlet (s &optional font)
         (interactive 
          (if current-prefix-arg
              (let 
              ((font (read-figlet-font "Font: "))
               (text (read-string "FIGlet Text: ")))
            (list text font))
            (list (read-string "FIGlet Text: ") nil)))
         (save-excursion
           (call-figlet font s)
           (figlet-block-comment-region)
           ))

       (defun banner (s) 
         (interactive "sBanner Text: ")
         (figlet s "banner"))
     #+end_src

*** system-packages

***** TODO Check and learn this
        :LOGBOOK:
        - State "TODO"       from              [2021-10-10 Sun 15:04]
        :END:

        #+begin_src emacs-lisp
          (require 'system-packages)
          (setq system-packages-use-sudo t)
        #+end_src

      
* Create frames and visit files

  #+begin_src emacs-lisp
    ;;; Open custom agenda (see variable org-agenda-custom-commands). This
    ;;; splits window vertically, which is ugly. We'll fix this below.
    ;;; Update: I have changed variable org-agenda-window-setup so that
    ;;; the agenda opens in the current window, with no splitting.
    (org-agenda nil "i")
    ;(split-window-horizontally)
    ;(find-file "~/Documents/OrgFiles/todo.org")
    (maximize-current-frame)

    ;;; Second frame: shell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (make-frame)
    (other-frame -1)
    (maximize-current-frame)

    ;;; disabled
    ;; (ansi-term "/home/fnaufel/.local/bin/xonsh" "xonsh")

    ;;; Bash shell (splits window automatically)
    (shell)
    (sleep-for 3)
    (comint-send-string (get-buffer-process (shell)) "cd /home/fnaufel/\n")
    (sleep-for 1)
    (dirs)
    (delete-other-windows)

    ;;; Third frame: sunrise ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (make-frame)
    (other-frame -1)
    (maximize-current-frame)
    (sunrise "/home/fnaufel" "/home/fnaufel/Downloads")
    ;; Set tree view for left-hand pane...
    ;; (sunrise-tree-view)
    ;; ...and for right-hand pane
    ;; (other-window 1)
    ;; (sunrise-tree-view)
    ;; go back to left-hand pane
    ;; (other-window 1)

    ;;; Fourth frame: telega ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (make-frame)
    (other-frame -1)
    (maximize-current-frame)
    (telega)
    (sleep-for 3)
    (telega-root-buffer-auto-fill)

    ;;; Call ebib and bury it, making the frame as before
    (ebib)
    (ebib-leave-ebib-windows)

    ;; ;;; Go back to initial frame
    (other-frame -1)
  #+end_src

