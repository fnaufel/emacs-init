;; -*- lexical-binding: t; -*-

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time)
                     gcs-done)))


;;;  ____            _                               _               
;;; |  _ \ __ _  ___| | ____ _  __ _  ___   ___  ___| |_ _   _ _ __  
;;; | |_) / _` |/ __| |/ / _` |/ _` |/ _ \ / __|/ _ \ __| | | | '_ \ 
;;; |  __/ (_| | (__|   < (_| | (_| |  __/ \__ \  __/ |_| |_| | |_) |
;;; |_|   \__,_|\___|_|\_\__,_|\__, |\___| |___/\___|\__|\__,_| .__/ 
;;;                            |___/                          |_|    

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(add-to-list 'load-path "/home/fnaufel/.emacs.d/lisp/")


;;;  ____  _             _                                  
;;; / ___|| |_ __ _ _ __| |_   ___  ___ _ ____   _____ _ __ 
;;; \___ \| __/ _` | '__| __| / __|/ _ \ '__\ \ / / _ \ '__|
;;;  ___) | || (_| | |  | |_  \__ \  __/ |   \ v /  __/ |   
;;; |____/ \__\__,_|_|   \__| |___/\___|_|    \_/ \___|_|   
                                                        
(server-start)


;;;  _   _ ___                    __ _       
;;; | | | |_ _|   ___ ___  _ __  / _(_) __ _ 
;;; | | | || |   / __/ _ \| '_ \| |_| |/ _` |
;;; | |_| || |  | (_| (_) | | | |  _| | (_| |
;;;  \___/|___|  \___\___/|_| |_|_| |_|\__, |
;;;                                    |___/ 
;;; UI config

;;; Set font
(defun fontify-frame (frame)
  (set-frame-parameter frame 'font "Jetbrains Mono-13"))

;;; Fontify current frame
(fontify-frame nil)

;;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)


;;;  ____       _               
;;; / ___|  ___| |_ _   _ _ __  
;;; \___ \ / _ \ __| | | | '_ \ 
;;;  ___) |  __/ |_| |_| | |_) |
;;; |____/ \___|\__|\__,_| .__/ 
;;;                      |_|    

(require 'setup)

;;; From https://github.com/daviwil/dotfiles/blob/master/Emacs.org
;;; See also https://www.emacswiki.org/emacs/SetupEl
(setup-define :delay
              (lambda (&rest time)
                `(run-with-idle-timer ,(or time 1)
                                      nil ;; Don't repeat
                                      (lambda () (require ',(setup-get 'feature)))))
              :documentation "Delay loading the feature until a certain amount of idle time has passed.")

(setup-define :disabled
              (lambda ()
                `,(setup-quit))
              :documentation "Always stop evaluating the body.")

(setup-define :load-after
              (lambda (features &rest body)
                (let ((body `(progn
                               (require ',(setup-get 'feature))
                               ,@body)))
                  (dolist (feature (if (listp features)
                                       (nreverse features)
                                     (list features)))
                    (setq body `(with-eval-after-load ',feature ,body)))
                  body))
              :documentation "Load the current feature after FEATURES."
              :indent 1)


;;;  ____            _                         
;;; |  _ \ __ _  ___| | ____ _  __ _  ___  ___ 
;;; | |_) / _` |/ __| |/ / _` |/ _` |/ _ \/ __|
;;; |  __/ (_| | (__|   < (_| | (_| |  __/\__ \
;;; |_|   \__,_|\___|_|\_\__,_|\__, |\___||___/
;;;                            |___/           


;;; which-key
(setup (:package which-key)
  (diminish 'which-key-mode)
  (which-key-mode)
  (setq which-key-idle-delay 1))


;;; anzu
(setup (:package anzu)
  (global-anzu-mode 1))


;;; helpful
(setup (:package helpful)
  (:global [remap describe-function] #'helpful-callable
           [remap describe-command] #'helpful-command
           [remap describe-variable] #'helpful-variable
           [remap describe-key] #'helpful-key
           "C-c C-d" #'helpful-at-point
           "C-h F" #'helpful-function))


;;; info-colors
(setup (:package info-colors)
  (:with-hook Info-selection-hook
    (:hook info-colors-fontify-node)))

